; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/module.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(LOCALLY
 (DECLARE (SPECIAL INTERFACE-RTD))
 (SETQ INTERFACE-RTD
       (MAKE-RECORD-TYPE 'SCHEME::INTERFACE
                         '(SCHEME::ID SCHEME::NAMES SCHEME::AUX-NAMES))))
(SET-FUNCTION-FROM-VALUE 'INTERFACE-RTD 'SCHEME::INTERFACE-RTD)
(LOCALLY
 (DECLARE (SPECIAL MAKE-INTERFACE INTERFACE-RTD))
 (SETQ MAKE-INTERFACE
       (RECORD-CONSTRUCTOR INTERFACE-RTD
                           '(SCHEME::ID SCHEME::NAMES SCHEME::AUX-NAMES))))
(SET-FUNCTION-FROM-VALUE 'MAKE-INTERFACE 'SCHEME::MAKE-INTERFACE)
(LOCALLY
 (DECLARE (SPECIAL INTERFACE-NAMES INTERFACE-RTD))
 (SETQ INTERFACE-NAMES (RECORD-ACCESSOR INTERFACE-RTD 'SCHEME::NAMES)))
(SET-FUNCTION-FROM-VALUE 'INTERFACE-NAMES 'SCHEME::INTERFACE-NAMES)
(LOCALLY
 (DECLARE (SPECIAL INTERFACE-AUX-NAMES INTERFACE-RTD))
 (SETQ INTERFACE-AUX-NAMES (RECORD-ACCESSOR INTERFACE-RTD 'SCHEME::AUX-NAMES)))
(SET-FUNCTION-FROM-VALUE 'INTERFACE-AUX-NAMES 'SCHEME::INTERFACE-AUX-NAMES)
(DEFUN INTERFACE-REF (SIG NAME)
  (IF (MEMBER NAME (INTERFACE-NAMES SIG) :TEST #'EQ) 'SCHEME::PUBLIC FALSE))
(SET-VALUE-FROM-FUNCTION 'INTERFACE-REF 'SCHEME::INTERFACE-REF)
(DEFUN INTERFACE-REF-AUX (SIG NAME)
  (IF (MEMBER NAME (INTERFACE-NAMES SIG) :TEST #'EQ)
      'SCHEME::PUBLIC
      (IF (MEMBER NAME (INTERFACE-AUX-NAMES SIG) :TEST #'EQ)
          'SCHEME::PRIVATE
          FALSE)))
(SET-VALUE-FROM-FUNCTION 'INTERFACE-REF-AUX 'SCHEME::INTERFACE-REF-AUX)
(LOCALLY
 (DECLARE (SPECIAL PROGRAM-ENV-RTD))
 (SETQ PROGRAM-ENV-RTD
       (MAKE-RECORD-TYPE 'SCHEME::PROGRAM-ENV
                         '(SCHEME::ID SCHEME::USE-LIST SCHEME::TABLE
                           SCHEME::PACKAGE))))
(SET-FUNCTION-FROM-VALUE 'PROGRAM-ENV-RTD 'SCHEME::PROGRAM-ENV-RTD)
(LOCALLY
 (DECLARE (SPECIAL PROGRAM-ENV-ID PROGRAM-ENV-RTD))
 (SETQ PROGRAM-ENV-ID (RECORD-ACCESSOR PROGRAM-ENV-RTD 'SCHEME::ID)))
(SET-FUNCTION-FROM-VALUE 'PROGRAM-ENV-ID 'SCHEME::PROGRAM-ENV-ID)
(LOCALLY
 (DECLARE (SPECIAL PROGRAM-ENV-USE-LIST PROGRAM-ENV-RTD))
 (SETQ PROGRAM-ENV-USE-LIST
       (RECORD-ACCESSOR PROGRAM-ENV-RTD 'SCHEME::USE-LIST)))
(SET-FUNCTION-FROM-VALUE 'PROGRAM-ENV-USE-LIST 'SCHEME::PROGRAM-ENV-USE-LIST)
(LOCALLY
 (DECLARE (SPECIAL PROGRAM-ENV-TABLE PROGRAM-ENV-RTD))
 (SETQ PROGRAM-ENV-TABLE (RECORD-ACCESSOR PROGRAM-ENV-RTD 'SCHEME::TABLE)))
(SET-FUNCTION-FROM-VALUE 'PROGRAM-ENV-TABLE 'SCHEME::PROGRAM-ENV-TABLE)
(LOCALLY
 (DECLARE (SPECIAL PROGRAM-ENV-PACKAGE PROGRAM-ENV-RTD))
 (SETQ PROGRAM-ENV-PACKAGE (RECORD-ACCESSOR PROGRAM-ENV-RTD 'SCHEME::PACKAGE)))
(SET-FUNCTION-FROM-VALUE 'PROGRAM-ENV-PACKAGE 'SCHEME::PROGRAM-ENV-PACKAGE)
(LOCALLY
 (DECLARE (SPECIAL PROGRAM-ENV? PROGRAM-ENV-RTD))
 (SETQ PROGRAM-ENV? (RECORD-PREDICATE PROGRAM-ENV-RTD)))
(SET-FUNCTION-FROM-VALUE 'PROGRAM-ENV? 'SCHEME::PROGRAM-ENV?)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL MAKE-PROGRAM-ENV PROGRAM-ENV-RTD STRUCTURE-PACKAGE))
  (SETQ MAKE-PROGRAM-ENV
        (LET ((CREATE
               (RECORD-CONSTRUCTOR PROGRAM-ENV-RTD
                                   '(SCHEME::ID SCHEME::USE-LIST SCHEME::TABLE
                                     SCHEME::PACKAGE))))
          #'(LAMBDA (ID USE-LIST)
              (LET ((ENV
                     (FUNCALL CREATE
                              ID
                              USE-LIST
                              (MAKE-TABLE)
                              (MAKE-PACKAGE-USING ID
                                                  (MAPCAR STRUCTURE-PACKAGE
                                                          USE-LIST)))))
                (INIT-ENVIRONMENT-FOR-SYNTAX! ENV)
                ENV))))))
(SET-FUNCTION-FROM-VALUE 'MAKE-PROGRAM-ENV 'SCHEME::MAKE-PROGRAM-ENV)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL PROGRAM-ENV-RTD))
  (DEFINE-RECORD-DISCLOSER PROGRAM-ENV-RTD
                           #'(LAMBDA (R)
                               (LIST "Program-env" (PROGRAM-ENV-ID R))))))
(DEFUN PROGRAM-ENV-LOOKUP (PROGRAM-ENV NAME)
  (LET ((TEMP (TABLE-REF (PROGRAM-ENV-TABLE PROGRAM-ENV) NAME)))
    (IF (TRUEP TEMP) TEMP (PROGRAM-ENV-NEW-VARIABLE PROGRAM-ENV NAME))))
(SET-VALUE-FROM-FUNCTION 'PROGRAM-ENV-LOOKUP 'SCHEME::PROGRAM-ENV-LOOKUP)
(DEFUN PROGRAM-ENV-DEFINE! (PROGRAM-ENV NAME BINDING)
  (TABLE-SET! (PROGRAM-ENV-TABLE PROGRAM-ENV) NAME BINDING))
(SET-VALUE-FROM-FUNCTION 'PROGRAM-ENV-DEFINE! 'SCHEME::PROGRAM-ENV-DEFINE!)
(DEFUN PROGRAM-ENV-ENSURE-DEFINED (PROGRAM-ENV NAME)
  (LET ((PROBE (TABLE-REF (PROGRAM-ENV-TABLE PROGRAM-ENV) NAME)))
    (IF (AND (TRUEP (NODE? PROBE)) (TRUEP (PROGRAM-VARIABLE? PROBE)))
        PROBE
        (PROGRAM-ENV-NEW-VARIABLE PROGRAM-ENV NAME))))
(SET-VALUE-FROM-FUNCTION 'PROGRAM-ENV-ENSURE-DEFINED
                         'SCHEME::PROGRAM-ENV-ENSURE-DEFINED)
(DEFUN PROGRAM-ENV-NEW-VARIABLE (PROGRAM-ENV NAME)
  (LET ((Q? (IF (SCHEME-SYMBOL-P NAME) (QUALIFIED-SYMBOL? NAME) FALSE)))
    (LET ((TEMP
           (IF (NOT (TRUEP Q?))
               (PROG (.MODS.0)
                 (SETQ .MODS.0 (PROGRAM-ENV-USE-LIST PROGRAM-ENV))
                 (GO LOOP)
                LOOP
                 (LET ((MODS .MODS.0))
                   (IF (NOT (NULL MODS))
                       (LET ((TEMP (STRUCTURE-REF (CAR MODS) NAME)))
                         (IF (TRUEP TEMP)
                             (RETURN TEMP)
                             (PROGN (SETQ .MODS.0 (CDR MODS)) (GO LOOP))))
                       (RETURN FALSE))))
               FALSE)))
      (IF (TRUEP TEMP)
          TEMP
          (LET ((NODE
                 (MAKE-PROGRAM-VARIABLE NAME
                                        (IF (TRUEP Q?)
                                            NAME
                                            (INTERN-RENAMING-PERHAPS
                                             (NAME->STRING NAME)
                                             (PROGRAM-ENV-PACKAGE
                                              PROGRAM-ENV))))))
            (TABLE-SET! (PROGRAM-ENV-TABLE PROGRAM-ENV) NAME NODE)
            NODE)))))
(SET-VALUE-FROM-FUNCTION 'PROGRAM-ENV-NEW-VARIABLE
                         'SCHEME::PROGRAM-ENV-NEW-VARIABLE)
(LOCALLY
 (DECLARE (SPECIAL CLIENT-LOOKUP PROGRAM-ENV-LOOKUP))
 (SETQ CLIENT-LOOKUP PROGRAM-ENV-LOOKUP))
(SET-FUNCTION-FROM-VALUE 'CLIENT-LOOKUP 'SCHEME::CLIENT-LOOKUP)
(LOCALLY
 (DECLARE (SPECIAL CLIENT-DEFINE! PROGRAM-ENV-DEFINE!))
 (SETQ CLIENT-DEFINE! PROGRAM-ENV-DEFINE!))
(SET-FUNCTION-FROM-VALUE 'CLIENT-DEFINE! 'SCHEME::CLIENT-DEFINE!)
(LOCALLY
 (DECLARE (SPECIAL CLIENT-ENSURE-DEFINED PROGRAM-ENV-ENSURE-DEFINED))
 (SETQ CLIENT-ENSURE-DEFINED PROGRAM-ENV-ENSURE-DEFINED))
(SET-FUNCTION-FROM-VALUE 'CLIENT-ENSURE-DEFINED 'SCHEME::CLIENT-ENSURE-DEFINED)
(LOCALLY
 (DECLARE (SPECIAL ENVIRONMENT-FOR-SYNTAX-KEY))
 (SETQ ENVIRONMENT-FOR-SYNTAX-KEY (LIST 'SCHEME::ENVIRONMENT-FOR-SYNTAX-KEY)))
(SET-FUNCTION-FROM-VALUE 'ENVIRONMENT-FOR-SYNTAX-KEY
                         'SCHEME::ENVIRONMENT-FOR-SYNTAX-KEY)
(DEFUN GET-ENVIRONMENT-FOR-SYNTAX (ENV)
  (DECLARE (SPECIAL ENVIRONMENT-FOR-SYNTAX-KEY))
  (FORCE (LOOKUP ENV ENVIRONMENT-FOR-SYNTAX-KEY)))
(SET-VALUE-FROM-FUNCTION 'GET-ENVIRONMENT-FOR-SYNTAX
                         'SCHEME::GET-ENVIRONMENT-FOR-SYNTAX)
(DEFUN DEFINE-TRANSFORMER-ENV! (ENV T-ENV-PROMISE)
  (DECLARE (SPECIAL ENVIRONMENT-FOR-SYNTAX-KEY))
  (DEFINE! ENV ENVIRONMENT-FOR-SYNTAX-KEY T-ENV-PROMISE))
(SET-VALUE-FROM-FUNCTION 'DEFINE-TRANSFORMER-ENV!
                         'SCHEME::DEFINE-TRANSFORMER-ENV!)
(DEFUN INIT-ENVIRONMENT-FOR-SYNTAX! (ENV)
  (DECLARE (SPECIAL REVISED^4-SCHEME-STRUCTURE))
  (DEFINE-TRANSFORMER-ENV! ENV
                           (REVISED^4-SCHEME::MAKE-PROMISE
                            #'(LAMBDA ()
                                (MAKE-PROGRAM-ENV
                                 (VALUES
                                  (INTERN
                                   (STRING-APPEND
                                    (SYMBOL->STRING (PROGRAM-ENV-ID ENV))
                                    "[FOR-SYNTAX]")
                                   SCHEME-PACKAGE))
                                 (LIST REVISED^4-SCHEME-STRUCTURE))))))
(SET-VALUE-FROM-FUNCTION 'INIT-ENVIRONMENT-FOR-SYNTAX!
                         'SCHEME::INIT-ENVIRONMENT-FOR-SYNTAX!)
(LOCALLY
 (DECLARE (SPECIAL STRUCTURE-RTD))
 (SETQ STRUCTURE-RTD
       (MAKE-RECORD-TYPE 'SCHEME::STRUCTURE
                         '(SCHEME::ID SCHEME::SIG SCHEME::PROGRAM-ENV
                           SCHEME::PACKAGE))))
(SET-FUNCTION-FROM-VALUE 'STRUCTURE-RTD 'SCHEME::STRUCTURE-RTD)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL MAKE-STRUCTURE STRUCTURE-RTD))
  (SETQ MAKE-STRUCTURE
        (LET ((CREATE
               (RECORD-CONSTRUCTOR STRUCTURE-RTD
                                   '(SCHEME::ID SCHEME::SIG SCHEME::PROGRAM-ENV
                                     SCHEME::PACKAGE))))
          #'(LAMBDA (ID SIG ENV)
              (FUNCALL CREATE
                       ID
                       SIG
                       ENV
                       (MAKE-PACKAGE-EXPORTING ID
                                               (LET ((PPACKAGE
                                                      (PROGRAM-ENV-PACKAGE
                                                       ENV)))
                                                 (MAPCAR
                                                  #'(LAMBDA (NAME)
                                                      (INTERN-RENAMING-PERHAPS
                                                       (SYMBOL->STRING NAME)
                                                       PPACKAGE))
                                                  (INTERFACE-NAMES SIG))))))))))
(SET-FUNCTION-FROM-VALUE 'MAKE-STRUCTURE 'SCHEME::MAKE-STRUCTURE)
(LOCALLY
 (DECLARE (SPECIAL STRUCTURE-ID STRUCTURE-RTD))
 (SETQ STRUCTURE-ID (RECORD-ACCESSOR STRUCTURE-RTD 'SCHEME::ID)))
(SET-FUNCTION-FROM-VALUE 'STRUCTURE-ID 'SCHEME::STRUCTURE-ID)
(LOCALLY
 (DECLARE (SPECIAL STRUCTURE-INTERFACE STRUCTURE-RTD))
 (SETQ STRUCTURE-INTERFACE (RECORD-ACCESSOR STRUCTURE-RTD 'SCHEME::SIG)))
(SET-FUNCTION-FROM-VALUE 'STRUCTURE-INTERFACE 'SCHEME::STRUCTURE-INTERFACE)
(LOCALLY
 (DECLARE (SPECIAL STRUCTURE-PROGRAM-ENV STRUCTURE-RTD))
 (SETQ STRUCTURE-PROGRAM-ENV
       (RECORD-ACCESSOR STRUCTURE-RTD 'SCHEME::PROGRAM-ENV)))
(SET-FUNCTION-FROM-VALUE 'STRUCTURE-PROGRAM-ENV 'SCHEME::STRUCTURE-PROGRAM-ENV)
(LOCALLY
 (DECLARE (SPECIAL STRUCTURE-PACKAGE STRUCTURE-RTD))
 (SETQ STRUCTURE-PACKAGE (RECORD-ACCESSOR STRUCTURE-RTD 'SCHEME::PACKAGE)))
(SET-FUNCTION-FROM-VALUE 'STRUCTURE-PACKAGE 'SCHEME::STRUCTURE-PACKAGE)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL STRUCTURE-RTD))
  (DEFINE-RECORD-DISCLOSER STRUCTURE-RTD
                           #'(LAMBDA (R) (LIST "Structure" (STRUCTURE-ID R))))))
(DEFUN STRUCTURE-REF (.MOD NAME)
  (IF (EQ (INTERFACE-REF (STRUCTURE-INTERFACE .MOD) NAME) 'SCHEME::PUBLIC)
      (PROGRAM-ENV-LOOKUP (STRUCTURE-PROGRAM-ENV .MOD) NAME)
      FALSE))
(SET-VALUE-FROM-FUNCTION 'STRUCTURE-REF 'SCHEME::STRUCTURE-REF)
