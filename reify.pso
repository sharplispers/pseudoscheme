; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/reify.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(LOCALLY
 (DECLARE (SPECIAL SCHEME-TRANSLATOR-ENV REVISED^4-SCHEME-STRUCTURE))
 (SETQ SCHEME-TRANSLATOR-ENV
       (MAKE-PROGRAM-ENV 'SCHEME::SCHEME-TRANSLATOR
                         (LIST REVISED^4-SCHEME-STRUCTURE))))
(SET-FUNCTION-FROM-VALUE 'SCHEME-TRANSLATOR-ENV 'SCHEME::SCHEME-TRANSLATOR-ENV)
(LOCALLY
 (DECLARE (SPECIAL SCHEME-TRANSLATOR-INTERFACE))
 (SETQ SCHEME-TRANSLATOR-INTERFACE
       (MAKE-INTERFACE 'SCHEME::SCHEME-TRANSLATOR
        '(SCHEME::MAKE-PROGRAM-ENV SCHEME::MAKE-INTERFACE
                                   SCHEME::MAKE-STRUCTURE
                                   SCHEME::PROGRAM-ENV-ID
                                   SCHEME::PROGRAM-ENV-PACKAGE
                                   SCHEME::PROGRAM-ENV-LOOKUP
                                   SCHEME::PROGRAM-ENV-DEFINE!
                                   SCHEME::TRANSLATE
                                   SCHEME::TRANSLATE-LAMBDA
                                   SCHEME::REALLY-TRANSLATE-FILE
                                   SCHEME::TRANSLATOR-VERSION
                                   SCHEME::PERFORM-USUAL-INTEGRATIONS!
                                   SCHEME::SCHEME-TRANSLATOR-ENV
                                   SCHEME::SCHEME-TRANSLATOR-STRUCTURE
                                   SCHEME::REVISED^4-SCHEME-STRUCTURE
                                   SCHEME::MAKE-SCHEME-USER-ENVIRONMENT
                                   SCHEME::INTERN-RENAMING-PERHAPS
                                   SCHEME::PROCESS-DEFINE-SYNTAX)
        'NIL)))
(SET-FUNCTION-FROM-VALUE 'SCHEME-TRANSLATOR-INTERFACE
                         'SCHEME::SCHEME-TRANSLATOR-INTERFACE)
(LOCALLY
 (DECLARE
  (SPECIAL SCHEME-TRANSLATOR-STRUCTURE
           SCHEME-TRANSLATOR-ENV
           SCHEME-TRANSLATOR-INTERFACE))
 (SETQ SCHEME-TRANSLATOR-STRUCTURE
       (MAKE-STRUCTURE 'SCHEME::SCHEME-TRANSLATOR
                       SCHEME-TRANSLATOR-INTERFACE
                       SCHEME-TRANSLATOR-ENV)))
(SET-FUNCTION-FROM-VALUE 'SCHEME-TRANSLATOR-STRUCTURE
                         'SCHEME::SCHEME-TRANSLATOR-STRUCTURE)
(DEFUN PERFORM-USUAL-INTEGRATIONS! (ENV)
  (DECLARE (SPECIAL REVISED^4-SCHEME-INTERFACE REVISED^4-SCHEME-ENV))
  (MAPC
   #'(LAMBDA (NAME)
       (LET ((PROBE
              (GET-INTEGRATION (PROGRAM-ENV-LOOKUP REVISED^4-SCHEME-ENV NAME))))
         (IF (TRUEP PROBE)
             (DEFINE-INTEGRATION! (PROGRAM-ENV-LOOKUP ENV NAME) PROBE))))
   (INTERFACE-NAMES REVISED^4-SCHEME-INTERFACE)))
(SET-VALUE-FROM-FUNCTION 'PERFORM-USUAL-INTEGRATIONS!
                         'SCHEME::PERFORM-USUAL-INTEGRATIONS!)
(DEFUN MAKE-SCHEME-USER-ENVIRONMENT (NAME)
  (DECLARE
   (SPECIAL SYNTAX-ERROR REVISED^4-SCHEME-INTERFACE REVISED^4-SCHEME-ENV))
  (LET ((ENV (MAKE-PROGRAM-ENV NAME 'NIL)))
    (MAPC
     #'(LAMBDA (.NAME.0)
         (MOVE-VALUE-OR-DENOTATION .NAME.0 REVISED^4-SCHEME-ENV ENV))
     (INTERFACE-NAMES REVISED^4-SCHEME-INTERFACE))
    (LET ((ENV-FOR-SYNTAX (GET-ENVIRONMENT-FOR-SYNTAX ENV)))
      (EVAL-FOR-SYNTAX
       (CONS 'SCHEME::DEFINE (CONS 'SCHEME::SYNTAX-ERROR (LIST FALSE)))
       ENV-FOR-SYNTAX)
      (FUNCALL
       (EVAL-FOR-SYNTAX
        '(SCHEME::LAMBDA (SCHEME::X)
                         (SCHEME::SET! SCHEME::SYNTAX-ERROR SCHEME::X))
        ENV-FOR-SYNTAX)
       SYNTAX-ERROR))
    ENV))
(SET-VALUE-FROM-FUNCTION 'MAKE-SCHEME-USER-ENVIRONMENT
                         'SCHEME::MAKE-SCHEME-USER-ENVIRONMENT)
(DEFUN MOVE-VALUE-OR-DENOTATION (NAME FROM TO)
  (LET ((DEN (PROGRAM-ENV-LOOKUP FROM NAME)))
    (IF (AND (TRUEP (NODE? DEN)) (TRUEP (PROGRAM-VARIABLE? DEN)))
        (LET ((FROM-SYM (PROGRAM-VARIABLE-LOCATION DEN)))
          (IF (BOUNDP FROM-SYM)
              (LET ((TO-SYM
                     (PROGRAM-VARIABLE-LOCATION (PROGRAM-ENV-LOOKUP TO NAME))))
                (SETF (SYMBOL-VALUE TO-SYM) (SYMBOL-VALUE FROM-SYM))
                (SET-FUNCTION-FROM-VALUE TO-SYM))
              (PROGRAM-ENV-DEFINE! TO NAME DEN)))
        (PROGRAM-ENV-DEFINE! TO NAME DEN))))
(SET-VALUE-FROM-FUNCTION 'MOVE-VALUE-OR-DENOTATION
                         'SCHEME::MOVE-VALUE-OR-DENOTATION)
(DEFUN EVAL-FOR-SYNTAX (FORM ENV) (EVAL (TRANSLATE FORM ENV)))
(SET-VALUE-FROM-FUNCTION 'EVAL-FOR-SYNTAX 'SCHEME::EVAL-FOR-SYNTAX)
(DEFUN .ERROR (&REST REST)
  (MAYBE-FIX-&REST-PARAMETER REST)
  (APPLY #'SCHEME-ERROR REST))
(SET-VALUE-FROM-FUNCTION '.ERROR 'SCHEME::ERROR)
(DEFUN GENERATE-STRUCTURE-DEFPACKAGE (STRUCT)
  (LET ((ENV (STRUCTURE-PROGRAM-ENV STRUCT)))
    (IF (EQ (STRUCTURE-ID STRUCT) (PROGRAM-ENV-ID ENV))
        (GENERATE-PROGRAM-ENV-DEFPACKAGE ENV (LIST STRUCT))
        (PROGN
         (.WARN "multiple structures over a package NYI")
         (CONS 'DEFPACKAGE
               (CONS (SYMBOL->STRING (STRUCTURE-ID STRUCT))
                     (CONS
                      (CONS ':USE (LIST (SYMBOL->STRING (PROGRAM-ENV-ID ENV))))
                      (LIST
                       (CONS ':EXPORT
                             (MAPCAR
                              #'(LAMBDA (NAME)
                                  (PERHAPS-RENAME (SYMBOL->STRING NAME)))
                              (INTERFACE-NAMES
                               (STRUCTURE-INTERFACE STRUCT))))))))))))
(SET-VALUE-FROM-FUNCTION 'GENERATE-STRUCTURE-DEFPACKAGE
                         'SCHEME::GENERATE-STRUCTURE-DEFPACKAGE)
(DEFUN GENERATE-PROGRAM-ENV-DEFPACKAGE (ENV STRUCTS)
  (DECLARE (SPECIAL LISP-PACKAGE))
  (CONS 'DEFPACKAGE
        (CONS (SYMBOL->STRING (PROGRAM-ENV-ID ENV))
              (CONS
               (CONS ':USE
                     (CONS (.PACKAGE-NAME LISP-PACKAGE)
                           (MAPCAR
                            #'(LAMBDA (STRUCT)
                                (SYMBOL->STRING (STRUCTURE-ID STRUCT)))
                            (PROGRAM-ENV-USE-LIST ENV))))
               (LIST
                (CONS ':EXPORT
                      (APPLY #'APPEND
                             (MAPCAR
                              #'(LAMBDA (STRUCT)
                                  (MAPCAR
                                   #'(LAMBDA (NAME)
                                       (PERHAPS-RENAME (SYMBOL->STRING NAME)))
                                   (INTERFACE-NAMES
                                    (STRUCTURE-INTERFACE STRUCT))))
                              STRUCTS))))))))
(SET-VALUE-FROM-FUNCTION 'GENERATE-PROGRAM-ENV-DEFPACKAGE
                         'SCHEME::GENERATE-PROGRAM-ENV-DEFPACKAGE)
(DEFUN WRITE-DEFPACKAGES (STRUCT-LIST FILENAME)
  (DECLARE (SPECIAL LISP-PACKAGE))
  (LET ((SCHEME::STRING FILENAME)
        (SCHEME::PROC
         #'(LAMBDA (PORT)
             (MAPC
              #'(LAMBDA (STRUCT)
                  (WITH-TARGET-PACKAGE LISP-PACKAGE
                                       #'(LAMBDA ()
                                           (WRITE-FORM
                                            (GENERATE-STRUCTURE-DEFPACKAGE
                                             STRUCT)
                                            PORT)
                                           (TERPRI PORT))))
              STRUCT-LIST))))
    (WITH-OPEN-FILE
        (SCHEME::PORT (MERGE-PATHNAMES SCHEME::STRING) :DIRECTION :OUTPUT
         :IF-EXISTS :NEW-VERSION)
      (FUNCALL SCHEME::PROC SCHEME::PORT)))
  (VALUES))
(SET-VALUE-FROM-FUNCTION 'WRITE-DEFPACKAGES 'SCHEME::WRITE-DEFPACKAGES)
