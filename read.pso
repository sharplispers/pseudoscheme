; -*- Mode: Lisp; Syntax: Common-Lisp; Package: REVISED^4-SCHEME; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/read.scm

(ps:in-package "REVISED^4-SCHEME")
(BEGIN-TRANSLATED-FILE)
(LOCALLY (DECLARE (SPECIAL CHAR->ASCII)) (SETQ CHAR->ASCII #'CHAR-CODE))
(SET-FUNCTION-FROM-VALUE 'CHAR->ASCII 'SCHEME::CHAR->ASCII)
(LOCALLY (DECLARE (SPECIAL ASCII->CHAR)) (SETQ ASCII->CHAR #'CODE-CHAR))
(SET-FUNCTION-FROM-VALUE 'ASCII->CHAR 'SCHEME::ASCII->CHAR)
(LOCALLY
 (DECLARE (SPECIAL ASCII-WHITESPACES))
 (SETQ ASCII-WHITESPACES '(32 10 9 12 13)))
(SET-FUNCTION-FROM-VALUE 'ASCII-WHITESPACES 'SCHEME::ASCII-WHITESPACES)
(LOCALLY (DECLARE (SPECIAL ASCII-LIMIT)) (SETQ ASCII-LIMIT 256))
(SET-FUNCTION-FROM-VALUE 'ASCII-LIMIT 'SCHEME::ASCII-LIMIT)
(DEFUN REVERSE-LIST->STRING (L N)
  (LET ((S (.MAKE-STRING N #\x)))
    (PROG (I |.L.0|)
      (PSETQ I (- N 1) |.L.0| L)
      (GO LOOP)
     LOOP
      (IF (< I 0)
          (RETURN S)
          (PROGN
           (SETF (CHAR (THE SIMPLE-STRING S) I) (CAR |.L.0|))
           UNSPECIFIC
           (PSETQ I (- I 1) |.L.0| (CDR |.L.0|))
           (GO LOOP))))))
(SET-VALUE-FROM-FUNCTION 'REVERSE-LIST->STRING 'SCHEME::REVERSE-LIST->STRING)
(LOCALLY
 (DECLARE (SPECIAL REALLY-STRING->SYMBOL STRING->SYMBOL))
 (SETQ REALLY-STRING->SYMBOL STRING->SYMBOL))
(SET-FUNCTION-FROM-VALUE 'REALLY-STRING->SYMBOL 'SCHEME::REALLY-STRING->SYMBOL)
(DEFUN INPUT-PORT-OPTION (PORT-OPTION)
  (IF (NULL PORT-OPTION)
      *STANDARD-INPUT*
      (IF (NULL (CDR PORT-OPTION))
          (CAR PORT-OPTION)
          (.ERROR "read-mumble: too many arguments" PORT-OPTION))))
(SET-VALUE-FROM-FUNCTION 'INPUT-PORT-OPTION 'SCHEME::INPUT-PORT-OPTION)
(LOCALLY (DECLARE (SPECIAL .ERROR)) (SETQ .ERROR #'SCHEME-ERROR))
(SET-FUNCTION-FROM-VALUE '.ERROR 'SCHEME::ERROR)
(LOCALLY (DECLARE (SPECIAL .WARN)) (SETQ .WARN #'SCHEME-WARN))
(SET-FUNCTION-FROM-VALUE '.WARN 'SCHEME::WARN)
(DEFUN SCHEME-READ (&REST PORT-OPTION)
  (DECLARE (SPECIAL CLOSE-PAREN))
  (MAYBE-FIX-&REST-PARAMETER PORT-OPTION)
  (LET ((PORT (INPUT-PORT-OPTION PORT-OPTION)))
    (PROG ()
      (GO LOOP)
     LOOP
      (LET ((FORM (SUB-READ PORT)))
        (IF (NOT (TRUEP (READER-TOKEN? FORM)))
            (RETURN FORM)
            (IF (EQ FORM CLOSE-PAREN)
                (PROGN
                 (.WARN "discarding extraneous right parenthesis")
                 (GO LOOP))
                (RETURN (READING-ERROR PORT (CDR FORM)))))))))
(SET-VALUE-FROM-FUNCTION 'SCHEME-READ 'SCHEME::SCHEME-READ)
(DEFUN SUB-READ-CAREFULLY (PORT)
  (LET ((FORM (SUB-READ PORT)))
    (IF (EQ FORM EOF-OBJECT)
        (READING-ERROR PORT "unexpected end of file")
        (IF (TRUEP (READER-TOKEN? FORM))
            (READING-ERROR PORT (CDR FORM))
            FORM))))
(SET-VALUE-FROM-FUNCTION 'SUB-READ-CAREFULLY 'SCHEME::SUB-READ-CAREFULLY)
(LOCALLY
 (DECLARE (SPECIAL READER-TOKEN-MARKER))
 (SETQ READER-TOKEN-MARKER (LIST 'SCHEME::READER-TOKEN)))
(SET-FUNCTION-FROM-VALUE 'READER-TOKEN-MARKER 'SCHEME::READER-TOKEN-MARKER)
(DEFUN MAKE-READER-TOKEN (MESSAGE)
  (DECLARE (SPECIAL READER-TOKEN-MARKER))
  (CONS READER-TOKEN-MARKER MESSAGE))
(SET-VALUE-FROM-FUNCTION 'MAKE-READER-TOKEN 'SCHEME::MAKE-READER-TOKEN)
(DEFUN READER-TOKEN? (FORM)
  (DECLARE (SPECIAL READER-TOKEN-MARKER))
  (IF (CONSP FORM) (TRUE? (EQ (CAR FORM) READER-TOKEN-MARKER)) FALSE))
(SET-VALUE-FROM-FUNCTION 'READER-TOKEN? 'SCHEME::READER-TOKEN?)
(LOCALLY
 (DECLARE (SPECIAL CLOSE-PAREN))
 (SETQ CLOSE-PAREN (MAKE-READER-TOKEN "unexpected right parenthesis")))
(SET-FUNCTION-FROM-VALUE 'CLOSE-PAREN 'SCHEME::CLOSE-PAREN)
(LOCALLY
 (DECLARE (SPECIAL DOT))
 (SETQ DOT (MAKE-READER-TOKEN "unexpected \" . \"")))
(SET-FUNCTION-FROM-VALUE 'DOT 'SCHEME::DOT)
(DEFUN SUB-READ (PORT)
  (DECLARE (SPECIAL READ-DISPATCH-VECTOR))
  (LET ((C (.READ-CHAR PORT)))
    (IF (EQ C EOF-OBJECT)
        C
        (FUNCALL (SVREF READ-DISPATCH-VECTOR (CHAR->ASCII C)) C PORT))))
(SET-VALUE-FROM-FUNCTION 'SUB-READ 'SCHEME::SUB-READ)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL READ-DISPATCH-VECTOR ASCII-LIMIT))
  (SETQ READ-DISPATCH-VECTOR
        (MAKE-VECTOR ASCII-LIMIT
                     #'(LAMBDA (C PORT)
                         (READING-ERROR PORT "illegal character read" C))))))
(SET-FUNCTION-FROM-VALUE 'READ-DISPATCH-VECTOR 'SCHEME::READ-DISPATCH-VECTOR)
(LOCALLY
 (DECLARE (SPECIAL READ-TERMINATING?-VECTOR ASCII-LIMIT))
 (SETQ READ-TERMINATING?-VECTOR (MAKE-VECTOR ASCII-LIMIT TRUE)))
(SET-FUNCTION-FROM-VALUE 'READ-TERMINATING?-VECTOR
                         'SCHEME::READ-TERMINATING?-VECTOR)
(DEFUN SET-STANDARD-SYNTAX! (.CHAR TERMINATING? READER)
  (DECLARE (SPECIAL READ-TERMINATING?-VECTOR READ-DISPATCH-VECTOR))
  (SETF (SVREF READ-DISPATCH-VECTOR (CHAR->ASCII .CHAR)) READER)
  UNSPECIFIC
  (SETF (SVREF READ-TERMINATING?-VECTOR (CHAR->ASCII .CHAR)) TERMINATING?)
  UNSPECIFIC)
(SET-VALUE-FROM-FUNCTION 'SET-STANDARD-SYNTAX! 'SCHEME::SET-STANDARD-SYNTAX!)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL ASCII-WHITESPACES READ-DISPATCH-VECTOR))
  (FLET ((SUB-READ-WHITESPACE (C PORT)
           C
           (SUB-READ PORT)))
    (MAPC
     #'(LAMBDA (C)
         (SETF (SVREF READ-DISPATCH-VECTOR C) #'SUB-READ-WHITESPACE)
         UNSPECIFIC)
     ASCII-WHITESPACES))))
(AT-TOP-LEVEL
 (FLET ((SUB-READ-CONSTITUENT (C PORT)
          (PARSE-TOKEN (SUB-READ-TOKEN C PORT) PORT)))
   (MAPC #'(LAMBDA (C) (SET-STANDARD-SYNTAX! C FALSE #'SUB-READ-CONSTITUENT))
         (COERCE
          (THE SIMPLE-STRING
               (STRING-APPEND "!$%&*+-./0123456789:<=>?@^_~ABCDEFGHIJKLM"
                              "NOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"))
          'LIST))))
(DEFUN SET-STANDARD-READ-MACRO! (C TERMINATING? PROC)
  (SET-STANDARD-SYNTAX! C TERMINATING? PROC))
(SET-VALUE-FROM-FUNCTION 'SET-STANDARD-READ-MACRO!
                         'SCHEME::SET-STANDARD-READ-MACRO!)
(DEFUN SUB-READ-LIST (C PORT)
  (DECLARE (SPECIAL DOT CLOSE-PAREN))
  (LET ((FORM (SUB-READ PORT)))
    (IF (EQ FORM EOF-OBJECT)
        (READING-ERROR PORT
         "end of file inside list -- unbalanced parentheses")
        (IF (EQ FORM CLOSE-PAREN)
            'NIL
            (IF (EQ FORM DOT)
                (LET ((LAST-FORM (SUB-READ-CAREFULLY PORT)))
                  (LET ((ANOTHER-FORM (SUB-READ PORT)))
                    (LET ()
                      (IF (EQ ANOTHER-FORM CLOSE-PAREN)
                          LAST-FORM
                          (READING-ERROR PORT "randomness after form after dot"
                           ANOTHER-FORM)))))
                (CONS FORM (SUB-READ-LIST C PORT)))))))
(SET-VALUE-FROM-FUNCTION 'SUB-READ-LIST 'SCHEME::SUB-READ-LIST)
(LOCALLY
 (DECLARE (SPECIAL SUB-READ-LIST))
 (SET-STANDARD-READ-MACRO! #\( TRUE SUB-READ-LIST))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLOSE-PAREN))
  (SET-STANDARD-READ-MACRO! #\) TRUE #'(LAMBDA (C PORT) C PORT CLOSE-PAREN))))
(AT-TOP-LEVEL
 (SET-STANDARD-READ-MACRO! #\' TRUE
  #'(LAMBDA (C PORT) C (LIST 'SCHEME::QUOTE (SUB-READ-CAREFULLY PORT)))))
(AT-TOP-LEVEL
 (SET-STANDARD-READ-MACRO! #\` TRUE
  #'(LAMBDA (C PORT) C (LIST 'SCHEME::QUASIQUOTE (SUB-READ-CAREFULLY PORT)))))
(AT-TOP-LEVEL
 (SET-STANDARD-READ-MACRO! #\, TRUE
  #'(LAMBDA (C PORT)
      C
      (LET ((NEXT (.PEEK-CHAR PORT)))
        (LET ((KEYWORD
               (IF (EQ NEXT EOF-OBJECT)
                   (READING-ERROR PORT "end of file after ,")
                   (IF (CHAR= NEXT #\@)
                       (PROGN (.READ-CHAR PORT) 'SCHEME::UNQUOTE-SPLICING)
                       'SCHEME::UNQUOTE))))
          (LET ()
            (LIST KEYWORD (SUB-READ-CAREFULLY PORT))))))))
(AT-TOP-LEVEL
 (SET-STANDARD-READ-MACRO! #\" TRUE
  #'(LAMBDA (C PORT)
      C
      (PROG (|.L.0| |.I.1|)
        (PSETQ |.L.0| 'NIL |.I.1| 0)
        (GO LOOP)
       LOOP
        (LET ((L |.L.0|) (I |.I.1|))
          (LET ((|.C.2| (.READ-CHAR PORT)))
            (IF (EQ |.C.2| EOF-OBJECT)
                (RETURN (READING-ERROR PORT "end of file within a string"))
                (IF (CHAR= |.C.2| #\\)
                    (LET ((|.C.3| (.READ-CHAR PORT)))
                      (IF (EQ |.C.3| EOF-OBJECT)
                          (RETURN
                           (READING-ERROR PORT "end of file within a string"))
                          (IF (OR (CHAR= |.C.3| #\\) (CHAR= |.C.3| #\"))
                              (PROGN
                               (PSETQ |.L.0| (CONS |.C.3| L) |.I.1| (+ I 1))
                               (GO LOOP))
                              (RETURN
                               (READING-ERROR PORT
                                "invalid escaped character in string"
                                |.C.3|)))))
                    (IF (CHAR= |.C.2| #\")
                        (RETURN (REVERSE-LIST->STRING L I))
                        (PROGN
                         (PSETQ |.L.0| (CONS |.C.2| L) |.I.1| (+ I 1))
                         (GO LOOP)))))))))))
(AT-TOP-LEVEL
 (SET-STANDARD-READ-MACRO! #\; TRUE
  #'(LAMBDA (C PORT) C (GOBBLE-LINE PORT) (SUB-READ PORT))))
(DEFUN GOBBLE-LINE (PORT)
  (PROG ()
    (GO LOOP)
   LOOP
    (LET ((C (.READ-CHAR PORT)))
      (IF (EQ C EOF-OBJECT)
          (RETURN C)
          (IF (CHAR= C #\NEWLINE) (RETURN FALSE) (GO LOOP))))))
(SET-VALUE-FROM-FUNCTION 'GOBBLE-LINE 'SCHEME::GOBBLE-LINE)
(LOCALLY (DECLARE (SPECIAL *SHARP-MACROS*)) (SETQ *SHARP-MACROS* 'NIL))
(SET-FORWARDING-FUNCTION '*SHARP-MACROS* 'SCHEME::*SHARP-MACROS*)
(DEFUN DEFINE-SHARP-MACRO (C PROC)
  (DECLARE (SPECIAL *SHARP-MACROS*))
  (SETQ *SHARP-MACROS* (CONS (CONS C PROC) *SHARP-MACROS*)))
(SET-VALUE-FROM-FUNCTION 'DEFINE-SHARP-MACRO 'SCHEME::DEFINE-SHARP-MACRO)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL *SHARP-MACROS*))
  (SET-STANDARD-READ-MACRO! #\# FALSE
   #'(LAMBDA (C PORT)
       C
       (LET ((|.C.0| (.PEEK-CHAR PORT)))
         (LET ((|.C.1|
                (IF (EQ |.C.0| EOF-OBJECT)
                    (READING-ERROR PORT "end of file after #")
                    (CHAR-DOWNCASE |.C.0|))))
           (LET ((PROBE (TRUE? (ASSOC |.C.1| *SHARP-MACROS* :TEST #'EQ))))
             (LET ()
               (IF (TRUEP PROBE)
                   (FUNCALL (CDR PROBE) |.C.1| PORT)
                   (READING-ERROR PORT "unknown # syntax" |.C.1|))))))))))
(AT-TOP-LEVEL
 (DEFINE-SHARP-MACRO #\f #'(LAMBDA (C PORT) C (.READ-CHAR PORT) FALSE)))
(AT-TOP-LEVEL
 (DEFINE-SHARP-MACRO #\t #'(LAMBDA (C PORT) C (.READ-CHAR PORT) TRUE)))
(AT-TOP-LEVEL
 (DEFINE-SHARP-MACRO #\\
  #'(LAMBDA (C PORT)
      C
      (.READ-CHAR PORT)
      (LET ((|.C.0| (.PEEK-CHAR PORT)))
        (IF (EQ |.C.0| EOF-OBJECT)
            (READING-ERROR PORT "end of file after #\\")
            (IF (ALPHA-CHAR-P |.C.0|)
                (LET ((NAME (SUB-READ-CAREFULLY PORT)))
                  (IF (= (LENGTH (THE SIMPLE-STRING (SYMBOL->STRING NAME))) 1)
                      |.C.0|
                      (LET ((TEMP
                             (TRUE?
                              (ASSOC NAME
                                     '((SCHEME::SPACE #\SPACE)
                                       (SCHEME::NEWLINE #\NEWLINE))
                                     :TEST
                                     #'EQ))))
                        (IF (TRUEP TEMP)
                            (CADR TEMP)
                            (READING-ERROR PORT "unknown #\\ name" NAME)))))
                (.READ-CHAR PORT)))))))
(AT-TOP-LEVEL
 (DEFINE-SHARP-MACRO #\(
  #'(LAMBDA (C PORT)
      (.READ-CHAR PORT)
      (COERCE (THE LIST (SUB-READ-LIST C PORT)) 'SIMPLE-VECTOR))))
(AT-TOP-LEVEL
 (FLET ((NUMBER-SHARP-MACRO (C PORT)
          C
          (LET ((.STRING (SUB-READ-TOKEN #\# PORT)))
            (LET ((TEMP (STRING->NUMBER .STRING)))
              (IF (TRUEP TEMP)
                  TEMP
                  (READING-ERROR PORT "unsupported number syntax" .STRING))))))
   (MAPC #'(LAMBDA (C) (DEFINE-SHARP-MACRO C #'NUMBER-SHARP-MACRO))
         '(#\b #\o #\d #\x #\i #\e))))
(DEFUN SUB-READ-TOKEN (C PORT)
  (DECLARE (SPECIAL READ-TERMINATING?-VECTOR))
  (PROG (|.L.0| |.N.1|)
    (PSETQ |.L.0| (LIST (PREFERRED-CASE C)) |.N.1| 1)
    (GO LOOP)
   LOOP
    (LET ((L |.L.0|) (N |.N.1|))
      (LET ((|.C.2| (.PEEK-CHAR PORT)))
        (IF
         (OR (EQ |.C.2| EOF-OBJECT)
             (TRUEP (SVREF READ-TERMINATING?-VECTOR (CHAR->ASCII |.C.2|))))
         (RETURN (REVERSE-LIST->STRING L N))
         (PROGN
          (PSETQ |.L.0|
                   (CONS (PREFERRED-CASE (.READ-CHAR PORT)) L)
                 |.N.1|
                   (+ N 1))
          (GO LOOP)))))))
(SET-VALUE-FROM-FUNCTION 'SUB-READ-TOKEN 'SCHEME::SUB-READ-TOKEN)
(DEFUN PARSE-TOKEN (.STRING PORT)
  (DECLARE (SPECIAL DOT STRANGE-SYMBOL-NAMES))
  (IF
   (LET ((C (CHAR (THE SIMPLE-STRING .STRING) 0)))
     (OR (DIGIT-CHAR-P C) (CHAR= C #\+) (CHAR= C #\-) (CHAR= C #\.)))
   (LET ((TEMP (STRING->NUMBER .STRING)))
     (IF (TRUEP TEMP)
         TEMP
         (IF (MEMBER .STRING STRANGE-SYMBOL-NAMES :TEST #'SCHEME-EQUAL-P)
             (REALLY-STRING->SYMBOL .STRING)
             (IF (STRING= .STRING ".")
                 DOT
                 (READING-ERROR PORT "unsupported number syntax" .STRING)))))
   (REALLY-STRING->SYMBOL .STRING)))
(SET-VALUE-FROM-FUNCTION 'PARSE-TOKEN 'SCHEME::PARSE-TOKEN)
(LOCALLY
 (DECLARE (SPECIAL STRANGE-SYMBOL-NAMES))
 (SETQ STRANGE-SYMBOL-NAMES '("+" "-" "..." "1+" "-1+")))
(SET-FUNCTION-FROM-VALUE 'STRANGE-SYMBOL-NAMES 'SCHEME::STRANGE-SYMBOL-NAMES)
(LOCALLY
 (DECLARE (SPECIAL PREFERRED-CASE))
 (SETQ PREFERRED-CASE
       (IF (CHAR= (CHAR (THE SIMPLE-STRING (SYMBOL->STRING 'SCHEME::T)) 0) #\T)
           #'CHAR-UPCASE
           #'CHAR-DOWNCASE)))
(SET-FUNCTION-FROM-VALUE 'PREFERRED-CASE 'SCHEME::PREFERRED-CASE)
(DEFUN READING-ERROR (PORT MESSAGE &REST IRRITANTS)
  (DECLARE (SPECIAL .ERROR))
  (MAYBE-FIX-&REST-PARAMETER IRRITANTS)
  PORT
  (APPLY .ERROR MESSAGE IRRITANTS))
(SET-VALUE-FROM-FUNCTION 'READING-ERROR 'SCHEME::READING-ERROR)
(LOCALLY (DECLARE (SPECIAL SCHEME-READ)) (SETQ *SCHEME-READ* SCHEME-READ))
(AT-TOP-LEVEL
 (DEFINE-SHARP-MACRO #\'
  #'(LAMBDA (C PORT)
      C
      (.READ-CHAR PORT)
      (CONS 'FUNCTION (LIST (READ-PRESERVING-WHITESPACE PORT))))))
