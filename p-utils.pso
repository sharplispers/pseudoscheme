; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/p-utils.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(DEFUN LAST-PAIR (X) (LAST X))
(SET-VALUE-FROM-FUNCTION 'LAST-PAIR 'SCHEME::LAST-PAIR)
(DEFUN VECTOR-POSQ (THING V) (OR (POSITION THING (THE SIMPLE-VECTOR V)) FALSE))
(SET-VALUE-FROM-FUNCTION 'VECTOR-POSQ 'SCHEME::VECTOR-POSQ)
(DEFUN STRING-POSQ (C S) (OR (POSITION C (THE SIMPLE-STRING S)) FALSE))
(SET-VALUE-FROM-FUNCTION 'STRING-POSQ 'SCHEME::STRING-POSQ)
(DEFUN MAKE-FLUID (TOP-LEVEL-VALUE)
  (LET ((F (GENSYM "FLUID")))
    (SET F TOP-LEVEL-VALUE)
    F))
(SET-VALUE-FROM-FUNCTION 'MAKE-FLUID 'SCHEME::MAKE-FLUID)
(DEFUN FLUID (F) (SYMBOL-VALUE F))
(SET-VALUE-FROM-FUNCTION 'FLUID 'SCHEME::FLUID)
(DEFUN SET-FLUID! (F VAL) (SET F VAL))
(SET-VALUE-FROM-FUNCTION 'SET-FLUID! 'SCHEME::SET-FLUID!)
(DEFUN LET-FLUID (F VAL THUNK) (PROGV (LIST F) (LIST VAL) (FUNCALL THUNK)))
(SET-VALUE-FROM-FUNCTION 'LET-FLUID 'SCHEME::LET-FLUID)
(DEFUN MAKE-TABLE () (VALUES (MAKE-HASH-TABLE :SIZE 20 :REHASH-SIZE 2.0)))
(SET-VALUE-FROM-FUNCTION 'MAKE-TABLE 'SCHEME::MAKE-TABLE)
(DEFUN TABLE-SET! (TABLE KEY VAL) (SETF (GETHASH KEY TABLE) VAL))
(SET-VALUE-FROM-FUNCTION 'TABLE-SET! 'SCHEME::TABLE-SET!)
(DEFUN TABLE-REF (TABLE KEY) (GETHASH KEY TABLE FALSE))
(SET-VALUE-FROM-FUNCTION 'TABLE-REF 'SCHEME::TABLE-REF)
(LOCALLY
 (DECLARE (SPECIAL CL-READTABLE))
 (SETQ CL-READTABLE (COPY-READTABLE 'NIL)))
(SET-FUNCTION-FROM-VALUE 'CL-READTABLE 'SCHEME::CL-READTABLE)
(DEFUN WRITE-PRETTY (FORM PORT PACKAGE)
  (LET (FUNCALL
        (*PACKAGE* PACKAGE)
        (*PRINT-CASE* :UPCASE)
        (*READTABLE* CL-READTABLE))
    (DECLARE (SPECIAL CL-READTABLE))
    (FORMAT PORT "~&")
    (WRITE FORM :STREAM PORT :PRETTY TRUE :LENGTH 'NIL :LEVEL 'NIL)
    (VALUES)))
(DEFUN INTERN-RENAMING-PERHAPS (.STRING PACKAGE)
  (DECLARE (SPECIAL .SCHEME-PACKAGE))
  (INTERN (IF (EQ PACKAGE .SCHEME-PACKAGE) .STRING (PERHAPS-RENAME .STRING))
          PACKAGE))
(SET-VALUE-FROM-FUNCTION 'INTERN-RENAMING-PERHAPS
                         'SCHEME::INTERN-RENAMING-PERHAPS)
(DEFUN PERHAPS-RENAME (.STRING)
  (DECLARE (SPECIAL SYM LISP-PACKAGE STATUS))
  (IF
   (OR
    (TRUEP
     (MULTIPLE-VALUE-BIND
         (SYM STATUS)
         (FIND-SYMBOL .STRING LISP-PACKAGE)
       SYM
       (TRUE? (EQ STATUS :EXTERNAL))))
    (AND (> (LENGTH (THE SIMPLE-STRING .STRING)) 0)
         (CHAR= (CHAR (THE SIMPLE-STRING .STRING) 0) #\&)))
   (STRING-APPEND "." .STRING)
   .STRING))
(SET-VALUE-FROM-FUNCTION 'PERHAPS-RENAME 'SCHEME::PERHAPS-RENAME)
(LOCALLY
 (DECLARE (SPECIAL LISP-PACKAGE))
 (SETQ LISP-PACKAGE (FIND-PACKAGE "PS-LISP")))
(SET-FUNCTION-FROM-VALUE 'LISP-PACKAGE 'SCHEME::LISP-PACKAGE)
(DEFUN QUALIFIED-SYMBOL? (SYM)
  (DECLARE (SPECIAL .SCHEME-PACKAGE))
  (IF (SYMBOLP SYM)
      (TRUE? (NOT (EQ (SYMBOL-PACKAGE SYM) .SCHEME-PACKAGE)))
      FALSE))
(SET-VALUE-FROM-FUNCTION 'QUALIFIED-SYMBOL? 'SCHEME::QUALIFIED-SYMBOL?)
(LOCALLY
 (DECLARE (SPECIAL .SCHEME-PACKAGE))
 (SETQ .SCHEME-PACKAGE (SYMBOL-PACKAGE 'SCHEME::ASKDJFH)))
(SET-FUNCTION-FROM-VALUE '.SCHEME-PACKAGE 'SCHEME::SCHEME-PACKAGE)
(DEFUN MAKE-PACKAGE-USING (ID USE-LIST)
  (DECLARE (SPECIAL LISP-PACKAGE))
  (LET ((NAME (SYMBOL->STRING ID)))
    (LET ((PROBE (FIND-PACKAGE NAME)))
      (LET ((PACKAGE
             (IF (NOT (EQ PROBE 'NIL))
                 (PROGN
                  (MAPC
                   #'(LAMBDA (USE)
                       (IF
                        (NOT
                         (OR (EQ USE LISP-PACKAGE)
                             (MEMBER USE USE-LIST :TEST #'EQ)))
                        (UNUSE-PACKAGE USE PROBE)))
                   (PACKAGE-USE-LIST PROBE))
                  PROBE)
                 (MAKE-PACKAGE NAME :USE USE-LIST))))
        (LET ()
          (USE-PACKAGE
           (IF (EQ ID 'SCHEME::SCHEME) USE-LIST (CONS LISP-PACKAGE USE-LIST))
           PACKAGE)
          PACKAGE)))))
(SET-VALUE-FROM-FUNCTION 'MAKE-PACKAGE-USING 'SCHEME::MAKE-PACKAGE-USING)
(DEFUN MAKE-PACKAGE-EXPORTING (ID SYMS)
  (LET ((NAME (SYMBOL->STRING ID)))
    (LET ((NEW (OR (FIND-PACKAGE NAME) (MAKE-PACKAGE NAME :USE 'NIL))))
      (LET ()
        (IMPORT SYMS NEW)
        (EXPORT SYMS NEW)
        NEW))))
(SET-VALUE-FROM-FUNCTION 'MAKE-PACKAGE-EXPORTING
                         'SCHEME::MAKE-PACKAGE-EXPORTING)
(DEFUN SCHEME-IMPLEMENTATION-VERSION ()
  (STRING-APPEND (LISP-IMPLEMENTATION-TYPE) " " (LISP-IMPLEMENTATION-VERSION)))
(SET-VALUE-FROM-FUNCTION 'SCHEME-IMPLEMENTATION-VERSION
                         'SCHEME::SCHEME-IMPLEMENTATION-VERSION)
(DEFUN DEFINED-AS-CL-MACRO? (CL-SYM) (IF (MACRO-FUNCTION CL-SYM) TRUE FALSE))
(SET-VALUE-FROM-FUNCTION 'DEFINED-AS-CL-MACRO? 'SCHEME::DEFINED-AS-CL-MACRO?)
(DEFUN TRUE-NAME (SOURCE-FILE-NAME) (NAMESTRING (TRUENAME SOURCE-FILE-NAME)))
(SET-VALUE-FROM-FUNCTION 'TRUE-NAME 'SCHEME::TRUE-NAME)
(LOCALLY (DECLARE (SPECIAL .PACKAGE-NAME)) (SETQ .PACKAGE-NAME #'PACKAGE-NAME))
(SET-FUNCTION-FROM-VALUE '.PACKAGE-NAME 'SCHEME::PACKAGE-NAME)
(LOCALLY (DECLARE (SPECIAL .INTERN)) (SETQ .INTERN #'INTERN))
(SET-FUNCTION-FROM-VALUE '.INTERN 'SCHEME::INTERN)
