; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/classify.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(DEFUN CLASSIFY (FORM ENV)
  (DECLARE (SPECIAL CLASS/LITERAL CLASS/APPLICATION CLASS/NAME))
  (IF (TRUEP (NAME? FORM))
      (VALUES CLASS/NAME FORM ENV)
      (IF (CONSP FORM)
          (IF (TRUEP (NAME? (CAR FORM)))
              (LET ((DEN (LOOKUP ENV (CAR FORM))))
                (IF (TRUEP (SPECIAL-OPERATOR? DEN))
                    (CLASSIFY-SPECIAL DEN FORM ENV)
                    (IF (TRUEP (MACRO? DEN))
                        (CLASSIFY-MACRO-APPLICATION DEN FORM ENV)
                        (VALUES CLASS/APPLICATION FORM ENV))))
              (VALUES CLASS/APPLICATION FORM ENV))
          (IF (TRUEP (LITERAL? FORM))
              (VALUES CLASS/LITERAL FORM ENV)
              (CLASSIFY (SYNTAX-ERROR "unknown expression type" FORM) ENV)))))
(SET-VALUE-FROM-FUNCTION 'CLASSIFY 'SCHEME::CLASSIFY)
(DEFUN CLASSIFY-SPECIAL (DEN FORM ENV)
  (DECLARE (SPECIAL CLASS/LETREC-SYNTAX CLASS/LET-SYNTAX))
  (LET ((CLASS (SPECIAL-OPERATOR-CLASS DEN)))
    (IF (TRUEP (CHECK-SPECIAL-FORM-SYNTAX CLASS FORM))
        (IF (= CLASS CLASS/LET-SYNTAX)
            (CLASSIFY-LET-SYNTAX FORM ENV)
            (IF (= CLASS CLASS/LETREC-SYNTAX)
                (CLASSIFY-LETREC-SYNTAX FORM ENV)
                (VALUES CLASS FORM ENV)))
        (CLASSIFY (SYNTAX-ERROR "invalid special form syntax" FORM) ENV))))
(SET-VALUE-FROM-FUNCTION 'CLASSIFY-SPECIAL 'SCHEME::CLASSIFY-SPECIAL)
(DEFUN CLASSIFY-MACRO-APPLICATION (DEN FORM USE-ENV)
  (LET ((DEF-ENV (MACRO-ENVIRONMENT DEN)))
    (MULTIPLE-VALUE-CALL
        #'(LAMBDA (RENAME OUTPUT-ENV)
            (FLET ((COMPARE (CLIENT-NAME MACRO-NAME)
                     (IF
                      (AND (TRUEP (NAME? CLIENT-NAME))
                           (TRUEP (NAME? MACRO-NAME)))
                      (SAME-DENOTATION? (LOOKUP OUTPUT-ENV CLIENT-NAME)
                                        (LOOKUP OUTPUT-ENV MACRO-NAME))
                      (TRUE? (EQ CLIENT-NAME MACRO-NAME)))))
              (LET ((NEW-FORM
                     (FUNCALL (MACRO-TRANSFORMER DEN) FORM RENAME #'COMPARE)))
                (LET ()
                  (CLASSIFY NEW-FORM OUTPUT-ENV)))))
      (MAKE-RENAMER+ENV DEF-ENV USE-ENV))))
(SET-VALUE-FROM-FUNCTION 'CLASSIFY-MACRO-APPLICATION
                         'SCHEME::CLASSIFY-MACRO-APPLICATION)
(DEFUN PROCESS-SYNTAX-SPEC (SSPEC ENV)
  (LET ((FROB (EVAL-FOR-SYNTAX SSPEC (GET-ENVIRONMENT-FOR-SYNTAX ENV))))
    (LET ((PROC (IF (CONSP FROB) (CAR FROB) FROB)))
      (LET ()
        (IF (PROCEDUREP PROC)
            (MAKE-MACRO PROC ENV)
            (PROGN
             (.WARN "<thing> in (define-syntax foo <thing>) isn't a procedure"
              SSPEC)
             (MAKE-MACRO
              #'(LAMBDA (&REST REST)
                  (MAYBE-FIX-&REST-PARAMETER REST)
                  (.ERROR
                   "<thing> in (define-syntax foo <thing>) isn't a procedure"
                   SSPEC
                   REST))
              ENV)))))))
(SET-VALUE-FROM-FUNCTION 'PROCESS-SYNTAX-SPEC 'SCHEME::PROCESS-SYNTAX-SPEC)
(DEFUN PROCESS-DEFINE-SYNTAX (FORM ENV)
  (DEFINE! ENV (CADR FORM) (PROCESS-SYNTAX-SPEC (CADDR FORM) ENV)))
(SET-VALUE-FROM-FUNCTION 'PROCESS-DEFINE-SYNTAX 'SCHEME::PROCESS-DEFINE-SYNTAX)
(DEFUN CLASSIFY-LET-SYNTAX (FORM ENV)
  (DECLARE (SPECIAL SYNTAX-SPEC-NAME))
  (LET ((DSPECS (LET-SYNTAX-FORM-DSPECS FORM)))
    (CLASSIFY (LET-SYNTAX-FORM-BODY FORM)
              (BIND (MAPCAR SYNTAX-SPEC-NAME DSPECS)
                    (MAPCAR
                     #'(LAMBDA (DSPEC)
                         (PROCESS-SYNTAX-SPEC (SYNTAX-SPEC-FORM DSPEC) ENV))
                     DSPECS)
                    ENV))))
(SET-VALUE-FROM-FUNCTION 'CLASSIFY-LET-SYNTAX 'SCHEME::CLASSIFY-LET-SYNTAX)
(DEFUN CLASSIFY-LETREC-SYNTAX (FORM OUTER-ENV)
  (LET ((NEW (NEW-ENVIRONMENT OUTER-ENV)))
    (MAPC
     #'(LAMBDA (DSPEC)
         (DEFINE! NEW
                  (SYNTAX-SPEC-NAME DSPEC)
                  (PROCESS-SYNTAX-SPEC (SYNTAX-SPEC-FORM DSPEC) NEW)))
     (LETREC-SYNTAX-FORM-DSPECS FORM))
    (CLASSIFY (LETREC-SYNTAX-FORM-BODY FORM) NEW)))
(SET-VALUE-FROM-FUNCTION 'CLASSIFY-LETREC-SYNTAX
                         'SCHEME::CLASSIFY-LETREC-SYNTAX)
(DEFUN LOOKUP (ENV NAME)
  (IF (TRUEP (LOCAL-ENVIRONMENT? ENV))
      (LET ((PROBE
             (TRUE? (ASSOC NAME (LOCAL-ENVIRONMENT-BINDINGS ENV) :TEST #'EQ))))
        (IF (TRUEP PROBE)
            (CDR PROBE)
            (LOOKUP (LOCAL-ENVIRONMENT-PARENT ENV) NAME)))
      (IF (TRUEP (DIVERTED-ENVIRONMENT? ENV))
          (IF
           (AND (TRUEP (GENERATED? NAME))
                (TRUEP
                 (SAME-GENERATION? (GENERATED-GENERATION NAME)
                                   (DIVERTED-ENVIRONMENT-GENERATION ENV))))
           (LOOKUP (DIVERTED-ENVIRONMENT-MACRO-ENV ENV) (GENERATED-NAME NAME))
           (LOOKUP (DIVERTED-ENVIRONMENT-PARENT ENV) NAME))
          (CLIENT-LOOKUP ENV NAME))))
(SET-VALUE-FROM-FUNCTION 'LOOKUP 'SCHEME::LOOKUP)
(DEFUN DEFINE! (ENV NAME DENOTATION)
  (IF (TRUEP (LOCAL-ENVIRONMENT? ENV))
      (LET ((BS (LOCAL-ENVIRONMENT-BINDINGS ENV)))
        (LET ((PROBE (TRUE? (ASSOC NAME BS :TEST #'EQ))))
          (LET ()
            (IF (TRUEP PROBE)
                (PROGN (SETF (CDR PROBE) DENOTATION) UNSPECIFIC)
                (SET-LOCAL-ENVIRONMENT-BINDINGS! ENV
                                                 (CONS (CONS NAME DENOTATION)
                                                       BS))))))
      (IF (TRUEP (DIVERTED-ENVIRONMENT? ENV))
          (DEFINE! (DIVERTED-ENVIRONMENT-PARENT ENV) NAME DENOTATION)
          (CLIENT-DEFINE! ENV NAME DENOTATION))))
(SET-VALUE-FROM-FUNCTION 'DEFINE! 'SCHEME::DEFINE!)
(DEFUN ENSURE-DEFINED (ENV NAME)
  (IF (TRUEP (LOCAL-ENVIRONMENT? ENV))
      (LET ((BS (LOCAL-ENVIRONMENT-BINDINGS ENV)))
        (LET ((PROBE (TRUE? (ASSOC NAME BS :TEST #'EQ))))
          (LET ()
            (IF (TRUEP PROBE)
                (CDR PROBE)
                (PROGN
                 (SET-LOCAL-ENVIRONMENT-BINDINGS! ENV
                                                  (CONS (CONS NAME TRUE) BS))
                 TRUE)))))
      (IF (TRUEP (DIVERTED-ENVIRONMENT? ENV))
          (ENSURE-DEFINED (DIVERTED-ENVIRONMENT-PARENT ENV) NAME)
          (CLIENT-ENSURE-DEFINED ENV NAME))))
(SET-VALUE-FROM-FUNCTION 'ENSURE-DEFINED 'SCHEME::ENSURE-DEFINED)
(LOCALLY
 (DECLARE (SPECIAL LOCAL-ENVIRONMENT-RTD))
 (SETQ LOCAL-ENVIRONMENT-RTD
       (MAKE-RECORD-TYPE 'SCHEME::LOCAL-ENVIRONMENT
                         '(SCHEME::PARENT SCHEME::BINDINGS))))
(SET-FUNCTION-FROM-VALUE 'LOCAL-ENVIRONMENT-RTD 'SCHEME::LOCAL-ENVIRONMENT-RTD)
(LOCALLY
 (DECLARE (SPECIAL MAKE-LOCAL-ENVIRONMENT LOCAL-ENVIRONMENT-RTD))
 (SETQ MAKE-LOCAL-ENVIRONMENT
       (RECORD-CONSTRUCTOR LOCAL-ENVIRONMENT-RTD
                           '(SCHEME::PARENT SCHEME::BINDINGS))))
(SET-FUNCTION-FROM-VALUE 'MAKE-LOCAL-ENVIRONMENT
                         'SCHEME::MAKE-LOCAL-ENVIRONMENT)
(LOCALLY
 (DECLARE (SPECIAL LOCAL-ENVIRONMENT? LOCAL-ENVIRONMENT-RTD))
 (SETQ LOCAL-ENVIRONMENT? (RECORD-PREDICATE LOCAL-ENVIRONMENT-RTD)))
(SET-FUNCTION-FROM-VALUE 'LOCAL-ENVIRONMENT? 'SCHEME::LOCAL-ENVIRONMENT?)
(LOCALLY
 (DECLARE (SPECIAL LOCAL-ENVIRONMENT-PARENT LOCAL-ENVIRONMENT-RTD))
 (SETQ LOCAL-ENVIRONMENT-PARENT
       (RECORD-ACCESSOR LOCAL-ENVIRONMENT-RTD 'SCHEME::PARENT)))
(SET-FUNCTION-FROM-VALUE 'LOCAL-ENVIRONMENT-PARENT
                         'SCHEME::LOCAL-ENVIRONMENT-PARENT)
(LOCALLY
 (DECLARE (SPECIAL LOCAL-ENVIRONMENT-BINDINGS LOCAL-ENVIRONMENT-RTD))
 (SETQ LOCAL-ENVIRONMENT-BINDINGS
       (RECORD-ACCESSOR LOCAL-ENVIRONMENT-RTD 'SCHEME::BINDINGS)))
(SET-FUNCTION-FROM-VALUE 'LOCAL-ENVIRONMENT-BINDINGS
                         'SCHEME::LOCAL-ENVIRONMENT-BINDINGS)
(LOCALLY
 (DECLARE (SPECIAL SET-LOCAL-ENVIRONMENT-BINDINGS! LOCAL-ENVIRONMENT-RTD))
 (SETQ SET-LOCAL-ENVIRONMENT-BINDINGS!
       (RECORD-MODIFIER LOCAL-ENVIRONMENT-RTD 'SCHEME::BINDINGS)))
(SET-FUNCTION-FROM-VALUE 'SET-LOCAL-ENVIRONMENT-BINDINGS!
                         'SCHEME::SET-LOCAL-ENVIRONMENT-BINDINGS!)
(LOCALLY
 (DECLARE (SPECIAL DIVERTED-ENVIRONMENT-RTD))
 (SETQ DIVERTED-ENVIRONMENT-RTD
       (MAKE-RECORD-TYPE 'SCHEME::DIVERTED-ENVIRONMENT
                         '(SCHEME::PARENT SCHEME::GENERATION
                           SCHEME::MACRO-ENV))))
(SET-FUNCTION-FROM-VALUE 'DIVERTED-ENVIRONMENT-RTD
                         'SCHEME::DIVERTED-ENVIRONMENT-RTD)
(LOCALLY
 (DECLARE (SPECIAL MAKE-DIVERTED-ENVIRONMENT DIVERTED-ENVIRONMENT-RTD))
 (SETQ MAKE-DIVERTED-ENVIRONMENT
       (RECORD-CONSTRUCTOR DIVERTED-ENVIRONMENT-RTD
                           '(SCHEME::GENERATION SCHEME::MACRO-ENV
                             SCHEME::PARENT))))
(SET-FUNCTION-FROM-VALUE 'MAKE-DIVERTED-ENVIRONMENT
                         'SCHEME::MAKE-DIVERTED-ENVIRONMENT)
(LOCALLY
 (DECLARE (SPECIAL DIVERTED-ENVIRONMENT? DIVERTED-ENVIRONMENT-RTD))
 (SETQ DIVERTED-ENVIRONMENT? (RECORD-PREDICATE DIVERTED-ENVIRONMENT-RTD)))
(SET-FUNCTION-FROM-VALUE 'DIVERTED-ENVIRONMENT? 'SCHEME::DIVERTED-ENVIRONMENT?)
(LOCALLY
 (DECLARE (SPECIAL DIVERTED-ENVIRONMENT-PARENT DIVERTED-ENVIRONMENT-RTD))
 (SETQ DIVERTED-ENVIRONMENT-PARENT
       (RECORD-ACCESSOR DIVERTED-ENVIRONMENT-RTD 'SCHEME::PARENT)))
(SET-FUNCTION-FROM-VALUE 'DIVERTED-ENVIRONMENT-PARENT
                         'SCHEME::DIVERTED-ENVIRONMENT-PARENT)
(LOCALLY
 (DECLARE (SPECIAL DIVERTED-ENVIRONMENT-GENERATION DIVERTED-ENVIRONMENT-RTD))
 (SETQ DIVERTED-ENVIRONMENT-GENERATION
       (RECORD-ACCESSOR DIVERTED-ENVIRONMENT-RTD 'SCHEME::GENERATION)))
(SET-FUNCTION-FROM-VALUE 'DIVERTED-ENVIRONMENT-GENERATION
                         'SCHEME::DIVERTED-ENVIRONMENT-GENERATION)
(LOCALLY
 (DECLARE (SPECIAL DIVERTED-ENVIRONMENT-MACRO-ENV DIVERTED-ENVIRONMENT-RTD))
 (SETQ DIVERTED-ENVIRONMENT-MACRO-ENV
       (RECORD-ACCESSOR DIVERTED-ENVIRONMENT-RTD 'SCHEME::MACRO-ENV)))
(SET-FUNCTION-FROM-VALUE 'DIVERTED-ENVIRONMENT-MACRO-ENV
                         'SCHEME::DIVERTED-ENVIRONMENT-MACRO-ENV)
(DEFUN BIND (NAMES DENOTATIONS OUTER-ENV)
  (MAKE-LOCAL-ENVIRONMENT OUTER-ENV (MAPCAR #'CONS NAMES DENOTATIONS)))
(SET-VALUE-FROM-FUNCTION 'BIND 'SCHEME::BIND)
(DEFUN NEW-ENVIRONMENT (OUTER-ENV) (MAKE-LOCAL-ENVIRONMENT OUTER-ENV 'NIL))
(SET-VALUE-FROM-FUNCTION 'NEW-ENVIRONMENT 'SCHEME::NEW-ENVIRONMENT)
(DEFUN FOR-EACH-LOCAL (PROC ENV)
  (FLET ((DOIT (NAME+DEN)
           (LET ((DEN (CDR NAME+DEN)))
             (IF
              (AND (NOT (TRUEP (MACRO? DEN)))
                   (NOT (TRUEP (SPECIAL-OPERATOR? DEN))))
              (FUNCALL PROC DEN)))))
    (PROG (.ENV.0)
      (SETQ .ENV.0 ENV)
      (GO LOOP)
     LOOP
      (IF (TRUEP (LOCAL-ENVIRONMENT? .ENV.0))
          (PROGN
           (MAPC #'DOIT (LOCAL-ENVIRONMENT-BINDINGS .ENV.0))
           (SETQ .ENV.0 (LOCAL-ENVIRONMENT-PARENT .ENV.0))
           (GO LOOP))
          (IF (TRUEP (DIVERTED-ENVIRONMENT? .ENV.0))
              (PROGN
               (SETQ .ENV.0 (DIVERTED-ENVIRONMENT-PARENT .ENV.0))
               (GO LOOP))
              (RETURN UNSPECIFIC))))))
(SET-VALUE-FROM-FUNCTION 'FOR-EACH-LOCAL 'SCHEME::FOR-EACH-LOCAL)
(LOCALLY (DECLARE (SPECIAL SAME-DENOTATION? EQ?)) (SETQ SAME-DENOTATION? EQ?))
(SET-FUNCTION-FROM-VALUE 'SAME-DENOTATION? 'SCHEME::SAME-DENOTATION?)
(LOCALLY
 (DECLARE (SPECIAL TYPE/SPECIAL-OPERATOR))
 (SETQ TYPE/SPECIAL-OPERATOR
       (MAKE-RECORD-TYPE "Special operator" '(SCHEME::CLASS))))
(SET-FUNCTION-FROM-VALUE 'TYPE/SPECIAL-OPERATOR 'SCHEME::TYPE/SPECIAL-OPERATOR)
(LOCALLY
 (DECLARE (SPECIAL MAKE-SPECIAL-OPERATOR TYPE/SPECIAL-OPERATOR))
 (SETQ MAKE-SPECIAL-OPERATOR
       (RECORD-CONSTRUCTOR TYPE/SPECIAL-OPERATOR '(SCHEME::CLASS))))
(SET-FUNCTION-FROM-VALUE 'MAKE-SPECIAL-OPERATOR 'SCHEME::MAKE-SPECIAL-OPERATOR)
(LOCALLY
 (DECLARE (SPECIAL SPECIAL-OPERATOR? TYPE/SPECIAL-OPERATOR))
 (SETQ SPECIAL-OPERATOR? (RECORD-PREDICATE TYPE/SPECIAL-OPERATOR)))
(SET-FUNCTION-FROM-VALUE 'SPECIAL-OPERATOR? 'SCHEME::SPECIAL-OPERATOR?)
(LOCALLY
 (DECLARE (SPECIAL SPECIAL-OPERATOR-CLASS TYPE/SPECIAL-OPERATOR))
 (SETQ SPECIAL-OPERATOR-CLASS
       (RECORD-ACCESSOR TYPE/SPECIAL-OPERATOR 'SCHEME::CLASS)))
(SET-FUNCTION-FROM-VALUE 'SPECIAL-OPERATOR-CLASS
                         'SCHEME::SPECIAL-OPERATOR-CLASS)
(LOCALLY
 (DECLARE (SPECIAL TYPE/MACRO))
 (SETQ TYPE/MACRO (MAKE-RECORD-TYPE "Macro" '(SCHEME::PROC SCHEME::ENV))))
(SET-FUNCTION-FROM-VALUE 'TYPE/MACRO 'SCHEME::TYPE/MACRO)
(LOCALLY
 (DECLARE (SPECIAL MAKE-MACRO TYPE/MACRO))
 (SETQ MAKE-MACRO (RECORD-CONSTRUCTOR TYPE/MACRO '(SCHEME::PROC SCHEME::ENV))))
(SET-FUNCTION-FROM-VALUE 'MAKE-MACRO 'SCHEME::MAKE-MACRO)
(LOCALLY
 (DECLARE (SPECIAL MACRO? TYPE/MACRO))
 (SETQ MACRO? (RECORD-PREDICATE TYPE/MACRO)))
(SET-FUNCTION-FROM-VALUE 'MACRO? 'SCHEME::MACRO?)
(LOCALLY
 (DECLARE (SPECIAL MACRO-TRANSFORMER TYPE/MACRO))
 (SETQ MACRO-TRANSFORMER (RECORD-ACCESSOR TYPE/MACRO 'SCHEME::PROC)))
(SET-FUNCTION-FROM-VALUE 'MACRO-TRANSFORMER 'SCHEME::MACRO-TRANSFORMER)
(LOCALLY
 (DECLARE (SPECIAL MACRO-ENVIRONMENT TYPE/MACRO))
 (SETQ MACRO-ENVIRONMENT (RECORD-ACCESSOR TYPE/MACRO 'SCHEME::ENV)))
(SET-FUNCTION-FROM-VALUE 'MACRO-ENVIRONMENT 'SCHEME::MACRO-ENVIRONMENT)
(DEFUN NAME? (THING) (OR (SCHEME-SYMBOL-P THING) (GENERATED? THING)))
(SET-VALUE-FROM-FUNCTION 'NAME? 'SCHEME::NAME?)
(LOCALLY (DECLARE (SPECIAL SAME-NAME? EQ?)) (SETQ SAME-NAME? EQ?))
(SET-FUNCTION-FROM-VALUE 'SAME-NAME? 'SCHEME::SAME-NAME?)
(LOCALLY (DECLARE (SPECIAL NAME-MEMBER MEMQ)) (SETQ NAME-MEMBER MEMQ))
(SET-FUNCTION-FROM-VALUE 'NAME-MEMBER 'SCHEME::NAME-MEMBER)
(LOCALLY (DECLARE (SPECIAL NAME-ASSOC ASSQ)) (SETQ NAME-ASSOC ASSQ))
(SET-FUNCTION-FROM-VALUE 'NAME-ASSOC 'SCHEME::NAME-ASSOC)
(DEFUN NAME->SYMBOL (NAME)
  (IF (SCHEME-SYMBOL-P NAME)
      NAME
      (VALUES (INTERN (NAME->STRING NAME) SCHEME-PACKAGE))))
(SET-VALUE-FROM-FUNCTION 'NAME->SYMBOL 'SCHEME::NAME->SYMBOL)
(DEFUN NAME->STRING (NAME)
  (IF (SCHEME-SYMBOL-P NAME)
      (SYMBOL->STRING NAME)
      (STRING-APPEND "."
                     (NAME->STRING (GENERATED-NAME NAME))
                     "."
                     (NUMBER->STRING (GENERATED-GENERATION NAME)))))
(SET-VALUE-FROM-FUNCTION 'NAME->STRING 'SCHEME::NAME->STRING)
(LOCALLY
 (DECLARE (SPECIAL TYPE/GENERATED))
 (SETQ TYPE/GENERATED
       (MAKE-RECORD-TYPE "Generated" '(SCHEME::NAME SCHEME::GENERATION))))
(SET-FUNCTION-FROM-VALUE 'TYPE/GENERATED 'SCHEME::TYPE/GENERATED)
(LOCALLY
 (DECLARE (SPECIAL MAKE-GENERATED TYPE/GENERATED))
 (SETQ MAKE-GENERATED
       (RECORD-CONSTRUCTOR TYPE/GENERATED '(SCHEME::NAME SCHEME::GENERATION))))
(SET-FUNCTION-FROM-VALUE 'MAKE-GENERATED 'SCHEME::MAKE-GENERATED)
(LOCALLY
 (DECLARE (SPECIAL GENERATED? TYPE/GENERATED))
 (SETQ GENERATED? (RECORD-PREDICATE TYPE/GENERATED)))
(SET-FUNCTION-FROM-VALUE 'GENERATED? 'SCHEME::GENERATED?)
(LOCALLY
 (DECLARE (SPECIAL GENERATED-NAME TYPE/GENERATED))
 (SETQ GENERATED-NAME (RECORD-ACCESSOR TYPE/GENERATED 'SCHEME::NAME)))
(SET-FUNCTION-FROM-VALUE 'GENERATED-NAME 'SCHEME::GENERATED-NAME)
(LOCALLY
 (DECLARE (SPECIAL GENERATED-GENERATION TYPE/GENERATED))
 (SETQ GENERATED-GENERATION
       (RECORD-ACCESSOR TYPE/GENERATED 'SCHEME::GENERATION)))
(SET-FUNCTION-FROM-VALUE 'GENERATED-GENERATION 'SCHEME::GENERATED-GENERATION)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL TYPE/GENERATED))
  (DEFINE-RECORD-DISCLOSER TYPE/GENERATED
                           #'(LAMBDA (G)
                               (LIST 'SCHEME::GENERATED
                                     (GENERATED-NAME G)
                                     (GENERATED-GENERATION G))))))
(DEFUN STRIP (THING)
  (IF (TRUEP (GENERATED? THING))
      (STRIP (GENERATED-NAME THING))
      (IF (CONSP THING)
          (LET ((X (STRIP (CAR THING))) (Y (STRIP (CDR THING))))
            (IF (AND (EQ X (CAR THING)) (EQ Y (CDR THING))) THING (CONS X Y)))
          (IF (TRUEP (VECTOR? THING))
              (LET ((NEW (MAKE-VECTOR (LENGTH (THE SIMPLE-VECTOR THING)))))
                (PROG (|.I.0| .SAME?.1)
                  (PSETQ |.I.0| 0 .SAME?.1 TRUE)
                  (GO LOOP)
                 LOOP
                  (LET ((I |.I.0|) (SAME? .SAME?.1))
                    (IF (>= I (LENGTH (THE SIMPLE-VECTOR THING)))
                        (IF (TRUEP SAME?) (RETURN THING) (RETURN NEW))
                        (LET ((X (STRIP (SVREF THING I))))
                          (SETF (SVREF NEW I) X)
                          UNSPECIFIC
                          (PSETQ |.I.0|
                                   (+ I 1)
                                 .SAME?.1
                                   (IF (TRUEP SAME?)
                                       (TRUE? (EQ X (SVREF THING I)))
                                       FALSE))
                          (GO LOOP))))))
              THING))))
(SET-VALUE-FROM-FUNCTION 'STRIP 'SCHEME::STRIP)
(LOCALLY (DECLARE (SPECIAL *GENERATION*)) (SETQ *GENERATION* 1))
(SET-FORWARDING-FUNCTION '*GENERATION* 'SCHEME::*GENERATION*)
(DEFUN NEW-GENERATION ()
  (DECLARE (SPECIAL *GENERATION*))
  (SETQ *GENERATION* (+ *GENERATION* 1))
  *GENERATION*)
(SET-VALUE-FROM-FUNCTION 'NEW-GENERATION 'SCHEME::NEW-GENERATION)
(LOCALLY (DECLARE (SPECIAL SAME-GENERATION? .=)) (SETQ SAME-GENERATION? .=))
(SET-FUNCTION-FROM-VALUE 'SAME-GENERATION? 'SCHEME::SAME-GENERATION?)
(DEFUN MAKE-RENAMER+ENV (MACRO-ENV CLIENT-ENV)
  (LET ((ALIST 'NIL) (GENERATION (NEW-GENERATION)))
    (VALUES
     #'(LAMBDA (NAME)
         (LET ((PROBE (TRUE? (ASSOC NAME ALIST :TEST #'EQ))))
           (IF (TRUEP PROBE)
               (CDR PROBE)
               (LET ((NEW-NAME (MAKE-GENERATED NAME GENERATION)))
                 (SETQ ALIST (CONS (CONS NAME NEW-NAME) ALIST))
                 NEW-NAME))))
     (MAKE-DIVERTED-ENVIRONMENT GENERATION MACRO-ENV CLIENT-ENV))))
(SET-VALUE-FROM-FUNCTION 'MAKE-RENAMER+ENV 'SCHEME::MAKE-RENAMER+ENV)
(DEFUN SCAN-BODY (FORMS OUTER-ENV)
  (DECLARE (SPECIAL CLASS/BEGIN CLASS/DEFINE))
  (LET ((SCAN-FORM UNASSIGNED) (ENV UNASSIGNED))
    (SETQ SCAN-FORM
          #'(LAMBDA (FORM FORM-ENV)
              (MULTIPLE-VALUE-CALL
                  #'(LAMBDA (CLASS .FORM.0 .FORM-ENV.1)
                      (IF (= CLASS CLASS/DEFINE)
                          (PROGN
                           (ENSURE-DEFINED ENV (DEFINE-FORM-LHS .FORM.0))
                           (LIST
                            (LIST (DEFINE-FORM-LHS .FORM.0)
                                  (DEFINE-FORM-RHS .FORM.0)
                                  .FORM-ENV.1)))
                          (IF (= CLASS CLASS/BEGIN)
                              (LET ((STMTS (BEGIN-FORM-STATEMENTS .FORM.0)))
                                (IF (NULL STMTS)
                                    'NIL
                                    (LET ((FIRST
                                           (FUNCALL SCAN-FORM
                                                    (CAR STMTS)
                                                    .FORM-ENV.1)))
                                      (IF (TRUEP FIRST)
                                          (APPLY #'APPEND
                                                 FIRST
                                                 (MAPCAR
                                                  #'(LAMBDA (.FORM.2)
                                                      (LET ((TEMP
                                                             (FUNCALL SCAN-FORM
                                                                      .FORM.2
                                                                      .FORM-ENV.1)))
                                                        (IF (TRUEP TEMP)
                                                            TEMP
                                                            (LIST
                                                             (SYNTAX-ERROR
                                                              "definitions and expressions are intermixed"
                                                              FORMS)))))
                                                  (CDR STMTS)))
                                          FALSE))))
                              FALSE)))
                (CLASSIFY FORM FORM-ENV))))
    (SETQ ENV (NEW-ENVIRONMENT OUTER-ENV))
    (PROG (.FORMS.3 SPECS)
      (PSETQ .FORMS.3 FORMS SPECS 'NIL)
      (GO LOOP)
     LOOP
      (IF (NULL .FORMS.3)
          (RETURN
           (VALUES SPECS (LIST (SYNTAX-ERROR "null body" .FORMS.3)) ENV))
          (LET ((PROBE (FUNCALL SCAN-FORM (CAR .FORMS.3) ENV)))
            (IF (TRUEP PROBE)
                (PROGN
                 (PSETQ .FORMS.3 (CDR .FORMS.3) SPECS (APPEND PROBE SPECS))
                 (GO LOOP))
                (RETURN (VALUES SPECS .FORMS.3 ENV))))))))
(SET-VALUE-FROM-FUNCTION 'SCAN-BODY 'SCHEME::SCAN-BODY)
