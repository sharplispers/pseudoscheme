; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/rules.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(DEFUN REWRITE-SYNTAX-RULES (.EXP R C)
  (PROCESS-RULES (CDDR .EXP) (CADR .EXP) R C))
(SET-VALUE-FROM-FUNCTION 'REWRITE-SYNTAX-RULES 'SCHEME::REWRITE-SYNTAX-RULES)
(DEFUN PROCESS-RULES (RULES SUBKEYWORDS R C)
  (LET ((FREE-META-VARIABLES UNASSIGNED)
        (META-VARIABLES UNASSIGNED)
        (PROCESS-TEMPLATE UNASSIGNED)
        (PROCESS-PATTERN UNASSIGNED)
        (PROCESS-SEGMENT-MATCH UNASSIGNED)
        (PROCESS-MATCH UNASSIGNED)
        (PROCESS-RULE UNASSIGNED)
        (MAKE-TRANSFORMER UNASSIGNED)
        (%TEMP UNASSIGNED)
        (%TAIL UNASSIGNED)
        (%SYNTAX-ERROR UNASSIGNED)
        (%RENAME UNASSIGNED)
        (%QUOTE UNASSIGNED)
        (%PAIR? UNASSIGNED)
        (%MAP UNASSIGNED)
        (%LET* UNASSIGNED)
        (%LET UNASSIGNED)
        (%LAMBDA UNASSIGNED)
        (%INPUT UNASSIGNED)
        (%EQUAL? UNASSIGNED)
        (%EQ? UNASSIGNED)
        (%ELSE UNASSIGNED)
        (%CONS UNASSIGNED)
        (%COND UNASSIGNED)
        (%COMPARE UNASSIGNED)
        (%CDR UNASSIGNED)
        (%CAR UNASSIGNED)
        (%AND UNASSIGNED)
        (%APPEND UNASSIGNED))
    (SETQ FREE-META-VARIABLES
          #'(LAMBDA (TEMPLATE RANK ENV FREE)
              (IF (TRUEP (NAME? TEMPLATE))
                  (IF
                   (AND (NOT (MEMBER TEMPLATE FREE :TEST #'EQ))
                        (LET ((PROBE (TRUE? (ASSOC TEMPLATE ENV :TEST #'EQ))))
                          (AND (TRUEP PROBE) (>= (CDR PROBE) RANK))))
                   (CONS TEMPLATE FREE)
                   FREE)
                  (IF (TRUEP (SEGMENT-TEMPLATE? TEMPLATE))
                      (FUNCALL FREE-META-VARIABLES
                               (CAR TEMPLATE)
                               RANK
                               ENV
                               (FUNCALL FREE-META-VARIABLES
                                        (CDDR TEMPLATE)
                                        RANK
                                        ENV
                                        FREE))
                      (IF (CONSP TEMPLATE)
                          (FUNCALL FREE-META-VARIABLES
                                   (CAR TEMPLATE)
                                   RANK
                                   ENV
                                   (FUNCALL FREE-META-VARIABLES
                                            (CDR TEMPLATE)
                                            RANK
                                            ENV
                                            FREE))
                          FREE)))))
    (SETQ META-VARIABLES
          #'(LAMBDA (PATTERN RANK VARS)
              (IF (TRUEP (NAME? PATTERN))
                  (IF (MEMBER PATTERN SUBKEYWORDS :TEST #'EQ)
                      VARS
                      (CONS (CONS PATTERN RANK) VARS))
                  (IF (TRUEP (SEGMENT-PATTERN? PATTERN))
                      (FUNCALL META-VARIABLES (CAR PATTERN) (+ RANK 1) VARS)
                      (IF (CONSP PATTERN)
                          (FUNCALL META-VARIABLES
                                   (CAR PATTERN)
                                   RANK
                                   (FUNCALL META-VARIABLES
                                            (CDR PATTERN)
                                            RANK
                                            VARS))
                          VARS)))))
    (SETQ PROCESS-TEMPLATE
          #'(LAMBDA (TEMPLATE RANK ENV)
              (IF (TRUEP (NAME? TEMPLATE))
                  (LET ((PROBE (TRUE? (ASSOC TEMPLATE ENV :TEST #'EQ))))
                    (IF (TRUEP PROBE)
                        (IF (<= (CDR PROBE) RANK)
                            TEMPLATE
                            (SYNTAX-ERROR
                             "template rank error (too few ...'s?)"
                             TEMPLATE))
                        (CONS %RENAME
                              (LIST (CONS 'SCHEME::QUOTE (LIST TEMPLATE))))))
                  (IF (TRUEP (SEGMENT-TEMPLATE? TEMPLATE))
                      (LET ((VARS
                             (FUNCALL FREE-META-VARIABLES
                                      (CAR TEMPLATE)
                                      (+ RANK 1)
                                      ENV
                                      'NIL)))
                        (IF (NULL VARS)
                            (SYNTAX-ERROR "too many ...'s" TEMPLATE)
                            (LET ((X
                                   (FUNCALL PROCESS-TEMPLATE
                                            (CAR TEMPLATE)
                                            (+ RANK 1)
                                            ENV)))
                              (LET ((GEN
                                     (IF (SCHEME-EQUAL-P (LIST X) VARS)
                                         X
                                         (CONS %MAP
                                               (CONS
                                                (CONS %LAMBDA
                                                      (CONS VARS (LIST X)))
                                                VARS)))))
                                (LET ()
                                  (IF (NULL (CDDR TEMPLATE))
                                      GEN
                                      (CONS %APPEND
                                            (CONS GEN
                                                  (LIST
                                                   (FUNCALL PROCESS-TEMPLATE
                                                            (CDDR TEMPLATE)
                                                            RANK
                                                            ENV))))))))))
                      (IF (CONSP TEMPLATE)
                          (CONS %CONS
                                (CONS
                                 (FUNCALL PROCESS-TEMPLATE
                                          (CAR TEMPLATE)
                                          RANK
                                          ENV)
                                 (LIST
                                  (FUNCALL PROCESS-TEMPLATE
                                           (CDR TEMPLATE)
                                           RANK
                                           ENV))))
                          (CONS %QUOTE (LIST TEMPLATE)))))))
    (SETQ PROCESS-PATTERN
          #'(LAMBDA (PATTERN PATH MAPIT)
              (IF (TRUEP (NAME? PATTERN))
                  (IF (MEMBER PATTERN SUBKEYWORDS :TEST #'EQ)
                      'NIL
                      (LIST (LIST PATTERN (FUNCALL MAPIT PATH))))
                  (IF (TRUEP (SEGMENT-PATTERN? PATTERN))
                      (FUNCALL PROCESS-PATTERN
                               (CAR PATTERN)
                               %TEMP
                               #'(LAMBDA (X)
                                   (FUNCALL MAPIT
                                            (IF (EQ %TEMP X)
                                                PATH
                                                (CONS %MAP
                                                      (CONS
                                                       (CONS %LAMBDA
                                                             (CONS (LIST %TEMP)
                                                                   (LIST X)))
                                                       (LIST PATH)))))))
                      (IF (CONSP PATTERN)
                          (APPEND
                           (FUNCALL PROCESS-PATTERN
                                    (CAR PATTERN)
                                    (CONS %CAR (LIST PATH))
                                    MAPIT)
                           (FUNCALL PROCESS-PATTERN
                                    (CDR PATTERN)
                                    (CONS %CDR (LIST PATH))
                                    MAPIT))
                          'NIL)))))
    (SETQ PROCESS-SEGMENT-MATCH
          #'(LAMBDA (INPUT PATTERN)
              (LET ((CONJUNCTS
                     (FUNCALL PROCESS-MATCH '(SCHEME::CAR SCHEME::L) PATTERN)))
                (IF (NULL CONJUNCTS)
                    (LIST (CONS 'SCHEME::LIST? (LIST INPUT)))
                    (LIST
                     (CONS 'SCHEME::LET
                           (CONS 'SCHEME::LOOP
                                 (CONS (LIST (CONS 'SCHEME::L (LIST INPUT)))
                                       (LIST
                                        (CONS 'SCHEME::OR
                                              (CONS '(SCHEME::NULL? SCHEME::L)
                                                    (LIST
                                                     (CONS 'SCHEME::AND
                                                           (CONS
                                                            '(SCHEME::PAIR?
                                                              SCHEME::L)
                                                            (APPEND CONJUNCTS
                                                                    '((SCHEME::LOOP
                                                                       (SCHEME::CDR
                                                                        SCHEME::L))))))))))))))))))
    (SETQ PROCESS-MATCH
          #'(LAMBDA (INPUT PATTERN)
              (IF (TRUEP (NAME? PATTERN))
                  (IF (MEMBER PATTERN SUBKEYWORDS :TEST #'SCHEME-EQUAL-P)
                      (LIST
                       (CONS %COMPARE
                             (CONS INPUT
                                   (LIST
                                    (CONS %RENAME
                                          (LIST
                                           (CONS 'SCHEME::QUOTE
                                                 (LIST PATTERN))))))))
                      'NIL)
                  (IF (TRUEP (SEGMENT-PATTERN? PATTERN))
                      (FUNCALL PROCESS-SEGMENT-MATCH INPUT (CAR PATTERN))
                      (IF (CONSP PATTERN)
                          (LIST
                           (CONS %LET
                                 (CONS (LIST (CONS %TEMP (LIST INPUT)))
                                       (LIST
                                        (CONS %AND
                                              (CONS (CONS %PAIR? (LIST %TEMP))
                                                    (APPEND
                                                     (FUNCALL PROCESS-MATCH
                                                              (CONS %CAR
                                                                    (LIST
                                                                     %TEMP))
                                                              (CAR PATTERN))
                                                     (FUNCALL PROCESS-MATCH
                                                              (CONS %CDR
                                                                    (LIST
                                                                     %TEMP))
                                                              (CDR
                                                               PATTERN)))))))))
                          (IF
                           (OR (NULL PATTERN)
                               (BOOLEANP PATTERN)
                               (CHARACTERP PATTERN))
                           (LIST
                            (CONS %EQ?
                                  (CONS INPUT
                                        (LIST
                                         (CONS 'SCHEME::QUOTE
                                               (LIST PATTERN))))))
                           (LIST
                            (CONS %EQUAL?
                                  (CONS INPUT
                                        (LIST
                                         (CONS 'SCHEME::QUOTE
                                               (LIST PATTERN))))))))))))
    (SETQ PROCESS-RULE
          #'(LAMBDA (RULE)
              (IF (AND (CONSP RULE) (CONSP (CDR RULE)) (NULL (CDDR RULE)))
                  (LET ((PATTERN (CDAR RULE)) (TEMPLATE (CADR RULE)))
                    (CONS (CONS %AND (FUNCALL PROCESS-MATCH %TAIL PATTERN))
                          (LIST
                           (CONS %LET*
                                 (CONS
                                  (FUNCALL PROCESS-PATTERN
                                           PATTERN
                                           %TAIL
                                           #'(LAMBDA (X) X))
                                  (LIST
                                   (FUNCALL PROCESS-TEMPLATE
                                            TEMPLATE
                                            0
                                            (FUNCALL META-VARIABLES
                                                     PATTERN
                                                     0
                                                     'NIL))))))))
                  (SYNTAX-ERROR "ill-formed syntax rule" RULE))))
    (SETQ MAKE-TRANSFORMER
          #'(LAMBDA (.RULES.0)
              (CONS %LAMBDA
                    (CONS (CONS %INPUT (CONS %RENAME (LIST %COMPARE)))
                          (LIST
                           (CONS %LET
                                 (CONS
                                  (LIST
                                   (CONS %TAIL
                                         (LIST (CONS %CDR (LIST %INPUT)))))
                                  (LIST
                                   (CONS %COND
                                         (APPEND (MAPCAR PROCESS-RULE .RULES.0)
                                                 (LIST
                                                  (CONS %ELSE
                                                        (LIST
                                                         (CONS %SYNTAX-ERROR
                                                               (CONS
                                                                '"use of macro doesn't match definition"
                                                                (LIST
                                                                 %INPUT))))))))))))))))
    (SETQ %TEMP (FUNCALL R 'SCHEME::TEMP))
    (SETQ %TAIL (FUNCALL R 'SCHEME::TAIL))
    (SETQ %SYNTAX-ERROR (FUNCALL R 'SCHEME::SYNTAX-ERROR))
    (SETQ %RENAME (FUNCALL R 'SCHEME::RENAME))
    (SETQ %QUOTE (FUNCALL R 'SCHEME::QUOTE))
    (SETQ %PAIR? (FUNCALL R 'SCHEME::PAIR?))
    (SETQ %MAP (FUNCALL R 'SCHEME::MAP))
    (SETQ %LET* (FUNCALL R 'SCHEME::LET*))
    (SETQ %LET (FUNCALL R 'SCHEME::LET))
    (SETQ %LAMBDA (FUNCALL R 'SCHEME::LAMBDA))
    (SETQ %INPUT (FUNCALL R 'SCHEME::INPUT))
    (SETQ %EQUAL? (FUNCALL R 'SCHEME::EQUAL?))
    (SETQ %EQ? (FUNCALL R 'SCHEME::EQ?))
    (SETQ %ELSE (FUNCALL R 'SCHEME::ELSE))
    (SETQ %CONS (FUNCALL R 'SCHEME::CONS))
    (SETQ %COND (FUNCALL R 'SCHEME::COND))
    (SETQ %COMPARE (FUNCALL R 'SCHEME::COMPARE))
    (SETQ %CDR (FUNCALL R 'SCHEME::CDR))
    (SETQ %CAR (FUNCALL R 'SCHEME::CAR))
    (SETQ %AND (FUNCALL R 'SCHEME::AND))
    (SETQ %APPEND (FUNCALL R 'SCHEME::APPEND))
    C
    (FUNCALL MAKE-TRANSFORMER RULES)))
(SET-VALUE-FROM-FUNCTION 'PROCESS-RULES 'SCHEME::PROCESS-RULES)
(DEFUN SEGMENT-PATTERN? (PATTERN)
  (IF (TRUEP (SEGMENT-TEMPLATE? PATTERN))
      (OR (NULL (CDDR PATTERN))
          (SYNTAX-ERROR "segment matching not implemented" PATTERN))
      FALSE))
(SET-VALUE-FROM-FUNCTION 'SEGMENT-PATTERN? 'SCHEME::SEGMENT-PATTERN?)
(DEFUN SEGMENT-TEMPLATE? (PATTERN)
  (DECLARE (SPECIAL INDICATORS-FOR-ZERO-OR-MORE))
  (IF (CONSP PATTERN)
      (IF (CONSP (CDR PATTERN))
          (TRUE?
           (MEMBER (CADR PATTERN) INDICATORS-FOR-ZERO-OR-MORE :TEST #'EQ))
          FALSE)
      FALSE))
(SET-VALUE-FROM-FUNCTION 'SEGMENT-TEMPLATE? 'SCHEME::SEGMENT-TEMPLATE?)
(LOCALLY
 (DECLARE (SPECIAL INDICATORS-FOR-ZERO-OR-MORE))
 (SETQ INDICATORS-FOR-ZERO-OR-MORE
       (LIST (VALUES (INTERN "..." SCHEME-PACKAGE)) 'SCHEME::---)))
(SET-FUNCTION-FROM-VALUE 'INDICATORS-FOR-ZERO-OR-MORE
                         'SCHEME::INDICATORS-FOR-ZERO-OR-MORE)
