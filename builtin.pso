; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/builtin.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(LOCALLY
 (DECLARE (SPECIAL INTEGRATIONS-TABLE))
 (SETQ INTEGRATIONS-TABLE (MAKE-TABLE)))
(SET-FUNCTION-FROM-VALUE 'INTEGRATIONS-TABLE 'SCHEME::INTEGRATIONS-TABLE)
(DEFUN DEFINE-INTEGRATION! (VAR INT)
  (DECLARE (SPECIAL INTEGRATIONS-TABLE))
  (TABLE-SET! INTEGRATIONS-TABLE VAR INT))
(SET-VALUE-FROM-FUNCTION 'DEFINE-INTEGRATION! 'SCHEME::DEFINE-INTEGRATION!)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL REVISED^4-SCHEME-ENV))
  (MAPC
   #'(LAMBDA (Z)
       (DEFINE-INTEGRATION! (PROGRAM-ENV-LOOKUP REVISED^4-SCHEME-ENV (CAR Z))
                            (CADR Z)))
   '((SCHEME::* (SCHEME::FUN *)) (SCHEME::+ (SCHEME::FUN +))
     (SCHEME::- (SCHEME::FUN -)) (SCHEME::/ (SCHEME::FUN /))
     (SCHEME::<= (SCHEME::PRED <=)) (SCHEME::< (SCHEME::PRED <))
     (SCHEME::= (SCHEME::PRED =)) (SCHEME::>= (SCHEME::PRED >=))
     (SCHEME::> (SCHEME::PRED >)) (SCHEME::ABS (SCHEME::FUN ABS))
     (SCHEME::ACOS (SCHEME::FUN ACOS)) (SCHEME::ANGLE (SCHEME::FUN PHASE))
     (SCHEME::APPEND (SCHEME::FUN APPEND)) (SCHEME::APPLY (SCHEME::FUN APPLY))
     (SCHEME::ASIN (SCHEME::FUN ASIN))
     (SCHEME::ASSOC
      (SCHEME::SUBST (SCHEME::OBJ SCHEME::LIST)
       (TRUE? (ASSOC SCHEME::OBJ SCHEME::LIST :TEST #'SCHEME-EQUAL-P))))
     (SCHEME::ASSQ
      (SCHEME::SUBST (SCHEME::OBJ SCHEME::LIST)
       (TRUE? (ASSOC SCHEME::OBJ SCHEME::LIST :TEST #'EQ))))
     (SCHEME::ASSV (SCHEME::PRED ASSOC 2)) (SCHEME::ATAN (SCHEME::FUN ATAN))
     (SCHEME::BOOLEAN? (SCHEME::PRED BOOLEANP 1))
     (SCHEME::CAAAAR (SCHEME::FUN CAAAAR))
     (SCHEME::CAAADR (SCHEME::FUN CAAADR)) (SCHEME::CAAAR (SCHEME::FUN CAAAR))
     (SCHEME::CAADAR (SCHEME::FUN CAADAR))
     (SCHEME::CAADDR (SCHEME::FUN CAADDR)) (SCHEME::CAADR (SCHEME::FUN CAADR))
     (SCHEME::CAAR (SCHEME::FUN CAAR)) (SCHEME::CADAAR (SCHEME::FUN CADAAR))
     (SCHEME::CADADR (SCHEME::FUN CADADR)) (SCHEME::CADAR (SCHEME::FUN CADAR))
     (SCHEME::CADDAR (SCHEME::FUN CADDAR))
     (SCHEME::CADDDR (SCHEME::FUN CADDDR)) (SCHEME::CADDR (SCHEME::FUN CADDR))
     (SCHEME::CADR (SCHEME::FUN CADR))
     (SCHEME::CALL-WITH-CURRENT-CONTINUATION
      (SCHEME::SUBST (SCHEME::PROC)
       (BLOCK SCHEME::CONTINUATION
         (FUNCALL SCHEME::PROC
                  #'(LAMBDA (&REST SCHEME::VALS)
                      (RETURN-FROM SCHEME::CONTINUATION
                        (VALUES-LIST SCHEME::VALS)))))))
     (SCHEME::CALL-WITH-INPUT-FILE
      (SCHEME::LAMBDA (SCHEME::STRING SCHEME::PROC)
                      (WITH-OPEN-FILE
                          (SCHEME::PORT (MERGE-PATHNAMES SCHEME::STRING)
                           :DIRECTION :INPUT)
                        (FUNCALL SCHEME::PROC SCHEME::PORT))))
     (SCHEME::CALL-WITH-OUTPUT-FILE
      (SCHEME::LAMBDA (SCHEME::STRING SCHEME::PROC)
                      (WITH-OPEN-FILE
                          (SCHEME::PORT (MERGE-PATHNAMES SCHEME::STRING)
                           :DIRECTION :OUTPUT :IF-EXISTS :NEW-VERSION)
                        (FUNCALL SCHEME::PROC SCHEME::PORT))))
     (SCHEME::CALL-WITH-VALUES
      (SCHEME::SUBST (SCHEME::THUNK SCHEME::PROC)
       (MULTIPLE-VALUE-CALL SCHEME::PROC (FUNCALL SCHEME::THUNK))))
     (SCHEME::CAR (SCHEME::FUN CAR)) (SCHEME::CDAAAR (SCHEME::FUN CDAAAR))
     (SCHEME::CDAADR (SCHEME::FUN CDAADR)) (SCHEME::CDAAR (SCHEME::FUN CDAAR))
     (SCHEME::CDADAR (SCHEME::FUN CDADAR))
     (SCHEME::CDADDR (SCHEME::FUN CDADDR)) (SCHEME::CDADR (SCHEME::FUN CDADR))
     (SCHEME::CDAR (SCHEME::FUN CDAR)) (SCHEME::CDDAAR (SCHEME::FUN CDDAAR))
     (SCHEME::CDDADR (SCHEME::FUN CDDADR)) (SCHEME::CDDAR (SCHEME::FUN CDDAR))
     (SCHEME::CDDDAR (SCHEME::FUN CDDDAR))
     (SCHEME::CDDDDR (SCHEME::FUN CDDDDR)) (SCHEME::CDDDR (SCHEME::FUN CDDDR))
     (SCHEME::CDDR (SCHEME::FUN CDDR)) (SCHEME::CDR (SCHEME::FUN CDR))
     (SCHEME::CEILING (SCHEME::FUN CEILING))
     (SCHEME::CHAR->INTEGER (SCHEME::FUN CHAR-CODE))
     (SCHEME::CHAR-ALPHABETIC? (SCHEME::PRED ALPHA-CHAR-P 1))
     (SCHEME::CHAR-CI<=? (SCHEME::PRED CHAR-NOT-GREATERP))
     (SCHEME::CHAR-CI<? (SCHEME::PRED CHAR-LESSP))
     (SCHEME::CHAR-CI=? (SCHEME::PRED CHAR-EQUAL))
     (SCHEME::CHAR-CI>=? (SCHEME::PRED CHAR-NOT-LESSP))
     (SCHEME::CHAR-CI>? (SCHEME::PRED CHAR-GREATERP))
     (SCHEME::CHAR-DOWNCASE (SCHEME::FUN CHAR-DOWNCASE))
     (SCHEME::CHAR-LOWER-CASE? (SCHEME::PRED LOWER-CASE-P 1))
     (SCHEME::CHAR-NUMERIC? (SCHEME::PRED DIGIT-CHAR-P 1))
     (SCHEME::CHAR-READY? (SCHEME::PRED LISTEN))
     (SCHEME::CHAR-UPCASE (SCHEME::FUN CHAR-UPCASE))
     (SCHEME::CHAR-UPPER-CASE? (SCHEME::PRED UPPER-CASE-P 1))
     (SCHEME::CHAR-WHITESPACE? (SCHEME::PRED CHAR-WHITESPACE-P 1))
     (SCHEME::CHAR<=? (SCHEME::PRED CHAR<=))
     (SCHEME::CHAR<? (SCHEME::PRED CHAR<))
     (SCHEME::CHAR=? (SCHEME::PRED CHAR=))
     (SCHEME::CHAR>=? (SCHEME::PRED CHAR>=))
     (SCHEME::CHAR>? (SCHEME::PRED CHAR>))
     (SCHEME::CHAR? (SCHEME::PRED CHARACTERP 1))
     (SCHEME::CLOSE-INPUT-PORT (SCHEME::FUN CLOSE))
     (SCHEME::CLOSE-OUTPUT-PORT (SCHEME::FUN CLOSE))
     (SCHEME::COMPLEX? (SCHEME::PRED NUMBERP 1))
     (SCHEME::CONS (SCHEME::FUN CONS)) (SCHEME::COS (SCHEME::FUN COS))
     (SCHEME::CURRENT-INPUT-PORT (SCHEME::SUBST NIL *STANDARD-INPUT*))
     (SCHEME::CURRENT-OUTPUT-PORT (SCHEME::SUBST NIL *STANDARD-OUTPUT*))
     (SCHEME::DENOMINATOR (SCHEME::FUN DENOMINATOR))
     (SCHEME::EOF-OBJECT?
      (SCHEME::SUBST (SCHEME::OBJ) (TRUE? (EQ SCHEME::OBJ EOF-OBJECT))))
     (SCHEME::EQ? (SCHEME::PRED EQ 2))
     (SCHEME::EQUAL? (SCHEME::PRED SCHEME-EQUAL-P 2))
     (SCHEME::EQV? (SCHEME::PRED EQL 2)) (SCHEME::EVEN? (SCHEME::PRED EVENP 1))
     (SCHEME::EXACT? (SCHEME::PRED RATIONALP 1))
     (SCHEME::EXACT->INEXACT (SCHEME::FUN FLOAT))
     (SCHEME::EXPT (SCHEME::FUN EXPT)) (SCHEME::EXP (SCHEME::FUN EXP))
     (SCHEME::FLOOR (SCHEME::FUN FLOOR)) (SCHEME::FOR-EACH (SCHEME::FUN MAPC))
     (SCHEME::GCD (SCHEME::FUN GCD)) (SCHEME::IMAG-PART (SCHEME::FUN IMAGPART))
     (SCHEME::INEXACT? (SCHEME::PRED FLOATP 1))
     (SCHEME::INEXACT->EXACT (SCHEME::FUN RATIONALIZE))
     (SCHEME::INPUT-PORT? (SCHEME::PRED INPUT-PORT-P 1))
     (SCHEME::INTEGER->CHAR (SCHEME::FUN CODE-CHAR))
     (SCHEME::INTEGER? (SCHEME::PRED INTEGERP 1))
     (SCHEME::LCM (SCHEME::FUN LCM)) (SCHEME::LENGTH (SCHEME::FUN LENGTH))
     (SCHEME::LIST (SCHEME::FUN LIST))
     (SCHEME::LIST->STRING
      (SCHEME::SUBST (SCHEME::L) (COERCE (THE LIST SCHEME::L) 'SIMPLE-STRING)))
     (SCHEME::LIST->VECTOR
      (SCHEME::SUBST (SCHEME::L) (COERCE (THE LIST SCHEME::L) 'SIMPLE-VECTOR)))
     (SCHEME::LIST-REF
      (SCHEME::SUBST (SCHEME::LIST SCHEME::N) (NTH SCHEME::N SCHEME::LIST)))
     (SCHEME::LIST-TAIL
      (SCHEME::SUBST (SCHEME::LIST SCHEME::N) (NTHCDR SCHEME::N SCHEME::LIST)))
     (SCHEME::LOG (SCHEME::FUN LOG)) (SCHEME::MAGNITUDE (SCHEME::FUN ABS))
     (SCHEME::MAKE-POLAR
      (SCHEME::SUBST (SCHEME::R SCHEME::TH) (* SCHEME::R (CIS SCHEME::TH))))
     (SCHEME::MAKE-RECTANGULAR (SCHEME::FUN COMPLEX))
     (SCHEME::MAP (SCHEME::FUN MAPCAR)) (SCHEME::MAX (SCHEME::FUN MAX))
     (SCHEME::MEMBER
      (SCHEME::SUBST (SCHEME::OBJ SCHEME::LIST)
       (TRUE? (MEMBER SCHEME::OBJ SCHEME::LIST :TEST #'SCHEME-EQUAL-P))))
     (SCHEME::MEMQ
      (SCHEME::SUBST (SCHEME::OBJ SCHEME::LIST)
       (TRUE? (MEMBER SCHEME::OBJ SCHEME::LIST :TEST #'EQ))))
     (SCHEME::MEMV (SCHEME::PRED MEMBER 2)) (SCHEME::MIN (SCHEME::FUN MIN))
     (SCHEME::MODULO (SCHEME::FUN MOD))
     (SCHEME::NEGATIVE? (SCHEME::PRED MINUSP 1))
     (SCHEME::NEWLINE (SCHEME::FUN TERPRI)) (SCHEME::NOT (SCHEME::SPECIAL))
     (SCHEME::NULL? (SCHEME::PRED NULL 1))
     (SCHEME::NUMBER? (SCHEME::PRED NUMBERP 1))
     (SCHEME::NUMERATOR (SCHEME::FUN NUMERATOR))
     (SCHEME::ODD? (SCHEME::PRED ODDP 1))
     (SCHEME::OPEN-INPUT-FILE
      (SCHEME::SUBST (SCHEME::STRING)
       (OPEN (MERGE-PATHNAMES SCHEME::STRING) :DIRECTION :INPUT)))
     (SCHEME::OPEN-OUTPUT-FILE
      (SCHEME::SUBST (SCHEME::STRING)
       (OPEN (MERGE-PATHNAMES SCHEME::STRING) :DIRECTION :OUTPUT)))
     (SCHEME::OUTPUT-PORT? (SCHEME::PRED OUTPUT-PORT-P 1))
     (SCHEME::PAIR? (SCHEME::PRED CONSP 1))
     (SCHEME::POSITIVE? (SCHEME::PRED PLUSP 1))
     (SCHEME::PROCEDURE? (SCHEME::PRED PROCEDUREP 1))
     (SCHEME::QUOTIENT
      (SCHEME::SUBST (SCHEME::N1 SCHEME::N2)
       (VALUES (TRUNCATE SCHEME::N1 SCHEME::N2))))
     (SCHEME::RATIONAL? (SCHEME::PRED RATIONALP 1))
     (SCHEME::REAL? (SCHEME::PRED REALP 1))
     (SCHEME::REAL-PART (SCHEME::FUN REALPART))
     (SCHEME::REMAINDER (SCHEME::FUN REM))
     (SCHEME::REVERSE (SCHEME::FUN REVERSE))
     (SCHEME::ROUND (SCHEME::FUN ROUND))
     (SCHEME::SET-CAR!
      (SCHEME::SUBST (SCHEME::PAIR SCHEME::OBJ)
       (SETF (CAR SCHEME::PAIR) SCHEME::OBJ) UNSPECIFIC))
     (SCHEME::SET-CDR!
      (SCHEME::SUBST (SCHEME::PAIR SCHEME::OBJ)
       (SETF (CDR SCHEME::PAIR) SCHEME::OBJ) UNSPECIFIC))
     (SCHEME::SIN (SCHEME::FUN SIN)) (SCHEME::SQRT (SCHEME::FUN SQRT))
     (SCHEME::STRING->LIST
      (SCHEME::SUBST (SCHEME::STRING)
       (COERCE (THE SIMPLE-STRING SCHEME::STRING) 'LIST)))
     (SCHEME::STRING->SYMBOL
      (SCHEME::SUBST (SCHEME::STRING)
       (VALUES (INTERN SCHEME::STRING SCHEME-PACKAGE))))
     (SCHEME::STRING-CI<=? (SCHEME::PRED STRING-NOT-GREATERP 2))
     (SCHEME::STRING-CI<? (SCHEME::PRED STRING-LESSP 2))
     (SCHEME::STRING-CI=? (SCHEME::PRED STRING-EQUAL 2))
     (SCHEME::STRING-CI>=? (SCHEME::PRED STRING-NOT-LESSP 2))
     (SCHEME::STRING-CI>? (SCHEME::PRED STRING-GREATERP 2))
     (SCHEME::STRING-COPY (SCHEME::FUN COPY-SEQ))
     (SCHEME::STRING-FILL!
      (SCHEME::SUBST (SCHEME::S SCHEME::VAL)
       (FILL (THE SIMPLE-STRING SCHEME::S) SCHEME::VAL)))
     (SCHEME::STRING-LENGTH
      (SCHEME::SUBST (SCHEME::S) (LENGTH (THE SIMPLE-STRING SCHEME::S))))
     (SCHEME::STRING-REF
      (SCHEME::SUBST (SCHEME::S SCHEME::K)
       (CHAR (THE SIMPLE-STRING SCHEME::S) SCHEME::K)))
     (SCHEME::STRING-SET!
      (SCHEME::SUBST (SCHEME::S SCHEME::K SCHEME::OBJ)
       (SETF (CHAR (THE SIMPLE-STRING SCHEME::S) SCHEME::K) SCHEME::OBJ)
       UNSPECIFIC))
     (SCHEME::STRING<=? (SCHEME::PRED STRING<= 2))
     (SCHEME::STRING<? (SCHEME::PRED STRING< 2))
     (SCHEME::STRING=? (SCHEME::PRED STRING= 2))
     (SCHEME::STRING>=? (SCHEME::PRED STRING>= 2))
     (SCHEME::STRING>? (SCHEME::PRED STRING> 2))
     (SCHEME::STRING? (SCHEME::PRED SIMPLE-STRING-P 1))
     (SCHEME::SUBSTRING (SCHEME::FUN SUBSEQ))
     (SCHEME::SYMBOL? (SCHEME::PRED SCHEME-SYMBOL-P 1))
     (SCHEME::TAN (SCHEME::FUN TAN))
     (SCHEME::TRANSCRIPT-OFF (SCHEME::SUBST NIL (DRIBBLE) UNSPECIFIC))
     (SCHEME::TRANSCRIPT-ON
      (SCHEME::SUBST (SCHEME::FILESPEC) (DRIBBLE SCHEME::FILESPEC) UNSPECIFIC))
     (SCHEME::TRUNCATE (SCHEME::FUN TRUNCATE))
     (SCHEME::VALUES (SCHEME::FUN VALUES))
     (SCHEME::VECTOR (SCHEME::FUN VECTOR))
     (SCHEME::VECTOR->LIST
      (SCHEME::SUBST (SCHEME::VEC)
       (COERCE (THE SIMPLE-VECTOR SCHEME::VEC) 'LIST)))
     (SCHEME::VECTOR-FILL!
      (SCHEME::SUBST (SCHEME::VEC SCHEME::VAL)
       (FILL (THE SIMPLE-VECTOR SCHEME::VEC) SCHEME::VAL)))
     (SCHEME::VECTOR-LENGTH
      (SCHEME::SUBST (SCHEME::VEC) (LENGTH (THE SIMPLE-VECTOR SCHEME::VEC))))
     (SCHEME::VECTOR-REF (SCHEME::FUN SVREF))
     (SCHEME::VECTOR-SET!
      (SCHEME::SUBST (SCHEME::VEC SCHEME::K SCHEME::OBJ)
       (SETF (SVREF SCHEME::VEC SCHEME::K) SCHEME::OBJ) UNSPECIFIC))
     (SCHEME::WITH-INPUT-FROM-FILE
      (SCHEME::SUBST (SCHEME::STRING SCHEME::THUNK)
       (WITH-OPEN-FILE
           (*STANDARD-INPUT* (MERGE-PATHNAMES SCHEME::STRING) :DIRECTION
            :INPUT)
         (FUNCALL SCHEME::THUNK))))
     (SCHEME::WITH-OUTPUT-TO-FILE
      (SCHEME::SUBST (SCHEME::STRING SCHEME::THUNK)
       (WITH-OPEN-FILE
           (*STANDARD-OUTPUT* (MERGE-PATHNAMES SCHEME::STRING) :DIRECTION
            :OUTPUT :IF-EXISTS :NEW-VERSION)
         (FUNCALL SCHEME::THUNK))))
     (SCHEME::WRITE-CHAR (SCHEME::FUN WRITE-CHAR))
     (SCHEME::ZERO? (SCHEME::PRED ZEROP 1))
     (SCHEME::UNASSIGNED (SCHEME::SUBST NIL UNASSIGNED))
     (SCHEME::UNSPECIFIC (SCHEME::VAL UNSPECIFIC))
     (SCHEME::AND-AUX (SCHEME::SPECIAL)) (SCHEME::OR-AUX (SCHEME::SPECIAL))
     (SCHEME::=>-AUX (SCHEME::SPECIAL)) (SCHEME::CASE-AUX (SCHEME::SPECIAL))))))
