; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/alpha.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(DEFUN NOTE-CONTEXT! (CONTEXT NODE) (FUNCALL CONTEXT NODE))
(SET-VALUE-FROM-FUNCTION 'NOTE-CONTEXT! 'SCHEME::NOTE-CONTEXT!)
(LOCALLY
 (DECLARE (SPECIAL VALUE-CONTEXT SET-VALUE-REFS!))
 (SETQ VALUE-CONTEXT SET-VALUE-REFS!))
(SET-FUNCTION-FROM-VALUE 'VALUE-CONTEXT 'SCHEME::VALUE-CONTEXT)
(LOCALLY
 (DECLARE (SPECIAL PROCEDURE-CONTEXT SET-PROC-REFS!))
 (SETQ PROCEDURE-CONTEXT SET-PROC-REFS!))
(SET-FUNCTION-FROM-VALUE 'PROCEDURE-CONTEXT 'SCHEME::PROCEDURE-CONTEXT)
(LOCALLY
 (DECLARE (SPECIAL LVALUE-CONTEXT SET-ASSIGNED!))
 (SETQ LVALUE-CONTEXT SET-ASSIGNED!))
(SET-FUNCTION-FROM-VALUE 'LVALUE-CONTEXT 'SCHEME::LVALUE-CONTEXT)
(DEFUN DEFINE-CONTEXT (VAR) VAR 'SCHEME::DEFINE-CONTEXT)
(SET-VALUE-FROM-FUNCTION 'DEFINE-CONTEXT 'SCHEME::DEFINE-CONTEXT)
(DEFUN TOP-LEVEL-CONTEXT (VAR) VAR 'SCHEME::TOP-LEVEL-CONTEXT)
(SET-VALUE-FROM-FUNCTION 'TOP-LEVEL-CONTEXT 'SCHEME::TOP-LEVEL-CONTEXT)
(DEFUN LOSE (CONTEXT) (DECLARE (SPECIAL VALUE-CONTEXT)) CONTEXT VALUE-CONTEXT)
(SET-VALUE-FROM-FUNCTION 'LOSE 'SCHEME::LOSE)
(LOCALLY
 (DECLARE (SPECIAL @FREE-VARIABLES))
 (SETQ @FREE-VARIABLES (MAKE-FLUID 'NIL)))
(SET-FUNCTION-FROM-VALUE '@FREE-VARIABLES 'SCHEME::@FREE-VARIABLES)
(DEFUN ALPHA-TOP (FORM S-ENV)
  (DECLARE (SPECIAL TOP-LEVEL-CONTEXT))
  (ALPHA FORM S-ENV TOP-LEVEL-CONTEXT))
(SET-VALUE-FROM-FUNCTION 'ALPHA-TOP 'SCHEME::ALPHA-TOP)
(LOCALLY (DECLARE (SPECIAL @WHERE)) (SETQ @WHERE (MAKE-FLUID 'SCHEME::<TOP>)))
(SET-FUNCTION-FROM-VALUE '@WHERE 'SCHEME::@WHERE)
(DEFUN ALPHA (FORM S-ENV CONTEXT)
  (DECLARE (SPECIAL ALPHATIZERS))
  (MULTIPLE-VALUE-CALL
      #'(LAMBDA (CLASS .FORM.0 |.S-ENV.1|)
          (FUNCALL (SVREF ALPHATIZERS CLASS) .FORM.0 |.S-ENV.1| CONTEXT))
    (CLASSIFY FORM S-ENV)))
(SET-VALUE-FROM-FUNCTION 'ALPHA 'SCHEME::ALPHA)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL ALPHATIZERS NUMBER-OF-CLASSES))
  (SETQ ALPHATIZERS
        (MAKE-VECTOR NUMBER-OF-CLASSES
                     #'(LAMBDA (FORM S-ENV CONTEXT)
                         (.ERROR "don't know how to alphatize this class"
                                 FORM))))))
(SET-FUNCTION-FROM-VALUE 'ALPHATIZERS 'SCHEME::ALPHATIZERS)
(DEFUN DEFINE-ALPHATIZER (CLASS PROC)
  (DECLARE (SPECIAL ALPHATIZERS))
  (SETF (SVREF ALPHATIZERS CLASS) PROC)
  UNSPECIFIC)
(SET-VALUE-FROM-FUNCTION 'DEFINE-ALPHATIZER 'SCHEME::DEFINE-ALPHATIZER)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/LITERAL))
  (DEFINE-ALPHATIZER CLASS/LITERAL
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         S-ENV
                         CONTEXT
                         (MAKE-CONSTANT .EXP FALSE)))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL @FREE-VARIABLES CLASS/NAME))
  (DEFINE-ALPHATIZER CLASS/NAME
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         (LET ((DENOTATION (LOOKUP S-ENV .EXP)))
                           (IF (TRUEP (NODE? DENOTATION))
                               (PROGN
                                (IF (TRUEP (LOCAL-VARIABLE? DENOTATION))
                                    (NOTE-CONTEXT! CONTEXT DENOTATION)
                                    (LET ((FREE (FLUID @FREE-VARIABLES)))
                                      (IF
                                       (NOT
                                        (MEMBER DENOTATION FREE :TEST #'EQ))
                                       (SET-FLUID! @FREE-VARIABLES
                                                   (CONS DENOTATION FREE)))))
                                DENOTATION)
                               (ALPHA
                                (SYNTAX-ERROR
                                 "syntactic keyword in invalid position"
                                 .EXP)
                                S-ENV
                                CONTEXT)))))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL VALUE-CONTEXT PROCEDURE-CONTEXT CLASS/APPLICATION))
  (DEFINE-ALPHATIZER CLASS/APPLICATION
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         CONTEXT
                         (MAKE-CALL (ALPHA (CAR .EXP) S-ENV PROCEDURE-CONTEXT)
                                    (MAPCAR
                                     #'(LAMBDA (ARG)
                                         (ALPHA ARG S-ENV VALUE-CONTEXT))
                                     (CDR .EXP)))))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/QUOTE))
  (DEFINE-ALPHATIZER CLASS/QUOTE
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         S-ENV
                         CONTEXT
                         (MAKE-CONSTANT (STRIP (CADR .EXP)) TRUE)))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE
   (SPECIAL VALUE-CONTEXT SET-CLOSED-OVER! PROCEDURE-CONTEXT CLASS/LAMBDA))
  (DEFINE-ALPHATIZER CLASS/LAMBDA
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         (IF (NOT (EQ CONTEXT PROCEDURE-CONTEXT))
                             (FOR-EACH-LOCAL SET-CLOSED-OVER! S-ENV))
                         (LET ((|.S-ENV.0|
                                (RENAME-VARS (PROPER-LISTIFY (CADR .EXP))
                                             S-ENV)))
                           (MAKE-LAMBDA (NEW-NAMES (CADR .EXP) |.S-ENV.0|)
                                        (ALPHA-BODY (CDDR .EXP)
                                                    |.S-ENV.0|
                                                    VALUE-CONTEXT)))))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL VALUE-CONTEXT CLASS/LETREC))
  (DEFINE-ALPHATIZER CLASS/LETREC
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         (LET ((SPECS (CADR .EXP)))
                           (LET ((VARS (MAPCAR #'CAR SPECS)))
                             (LET ((|.S-ENV.0| (RENAME-VARS VARS S-ENV)))
                               (LET ((NEW-VARS (NEW-NAMES VARS |.S-ENV.0|)))
                                 (LET ()
                                   (MAKE-LETREC NEW-VARS
                                                (MAPCAR
                                                 #'(LAMBDA (SPEC)
                                                     (ALPHA (CADR SPEC)
                                                            |.S-ENV.0|
                                                            VALUE-CONTEXT))
                                                 SPECS)
                                                (ALPHA-BODY (CDDR .EXP)
                                                            |.S-ENV.0|
                                                            (LOSE
                                                             CONTEXT))))))))))))
(DEFUN ALPHA-BODY (FORMS S-ENV CONTEXT)
  (DECLARE (SPECIAL VALUE-CONTEXT))
  (MULTIPLE-VALUE-CALL
      #'(LAMBDA (SPECS EXPS |.S-ENV.0|)
          (IF (NULL SPECS)
              (ALPHA-BEGINIFY EXPS |.S-ENV.0| CONTEXT)
              (LET ((NEW-VARS
                     (MAPCAR #'(LAMBDA (SPEC) (MAKE-LOCAL-VARIABLE (CAR SPEC)))
                             SPECS)))
                (MAPC #'(LAMBDA (SPEC VAR) (DEFINE! |.S-ENV.0| (CAR SPEC) VAR))
                      SPECS
                      NEW-VARS)
                (MAKE-LETREC NEW-VARS
                             (MAPCAR
                              #'(LAMBDA (SPEC)
                                  (ALPHA (CADR SPEC)
                                         (CADDR SPEC)
                                         VALUE-CONTEXT))
                              SPECS)
                             (ALPHA-BEGINIFY EXPS
                                             |.S-ENV.0|
                                             (LOSE CONTEXT))))))
    (SCAN-BODY FORMS S-ENV)))
(SET-VALUE-FROM-FUNCTION 'ALPHA-BODY 'SCHEME::ALPHA-BODY)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL VALUE-CONTEXT CLASS/IF))
  (DEFINE-ALPHATIZER CLASS/IF
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         (LET ((TEST (ALPHA (CADR .EXP) S-ENV VALUE-CONTEXT))
                               (CON (ALPHA (CADDR .EXP) S-ENV (LOSE CONTEXT)))
                               (ALT
                                (ALPHA
                                 (LET ((TAIL (CDDDR .EXP)))
                                   (IF (NULL TAIL) 'UNSPECIFIC (CAR TAIL)))
                                 S-ENV
                                 (LOSE CONTEXT))))
                           (MAKE-IF TEST CON ALT))))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL LVALUE-CONTEXT VALUE-CONTEXT CLASS/SET!))
  (DEFINE-ALPHATIZER CLASS/SET!
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         CONTEXT
                         (LET ((LHS (ALPHA (CADR .EXP) S-ENV LVALUE-CONTEXT)))
                           (IF (TRUEP (VARIABLE? LHS))
                               (MAKE-SET! LHS
                                          (ALPHA (CADDR .EXP)
                                                 S-ENV
                                                 VALUE-CONTEXT))
                               (ALPHA (SYNTAX-ERROR "invalid SET!" .EXP)
                                      S-ENV
                                      CONTEXT)))))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL TOP-LEVEL-CONTEXT CLASS/BEGIN))
  (DEFINE-ALPHATIZER CLASS/BEGIN
                     #'(LAMBDA (.EXP S-ENV CONTEXT)
                         (IF (NULL (CDR .EXP))
                             (PROGN
                              (IF (NOT (EQ CONTEXT TOP-LEVEL-CONTEXT))
                                  (NOTE "(begin) disallowed in this context"
                                        .EXP))
                              (ALPHA 'UNSPECIFIC S-ENV CONTEXT))
                             (ALPHA-BEGINIFY (CDR .EXP) S-ENV CONTEXT))))))
(DEFUN ALPHA-BEGINIFY (EXP-LIST S-ENV CONTEXT)
  (DECLARE (SPECIAL VALUE-CONTEXT TOP-LEVEL-CONTEXT))
  (IF (NULL (CDR EXP-LIST))
      (ALPHA (CAR EXP-LIST) S-ENV CONTEXT)
      (MAKE-BEGIN
       (ALPHA (CAR EXP-LIST)
              S-ENV
              (IF (EQ CONTEXT TOP-LEVEL-CONTEXT) CONTEXT VALUE-CONTEXT))
       (ALPHA-BEGINIFY (CDR EXP-LIST)
                       S-ENV
                       (IF (EQ CONTEXT TOP-LEVEL-CONTEXT)
                           CONTEXT
                           (LOSE CONTEXT))))))
(SET-VALUE-FROM-FUNCTION 'ALPHA-BEGINIFY 'SCHEME::ALPHA-BEGINIFY)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL VALUE-CONTEXT @WHERE TOP-LEVEL-CONTEXT CLASS/DEFINE))
  (DEFINE-ALPHATIZER CLASS/DEFINE
                     #'(LAMBDA (FORM S-ENV CONTEXT)
                         (IF (EQ CONTEXT TOP-LEVEL-CONTEXT)
                             (LET ((VAR
                                    (ENSURE-DEFINED S-ENV
                                                    (DEFINE-FORM-LHS FORM))))
                               (LET-FLUID @WHERE
                                          (PROGRAM-VARIABLE-NAME VAR)
                                          #'(LAMBDA ()
                                              (MAKE-DEFINE VAR
                                                           (ALPHA
                                                            (DEFINE-FORM-RHS
                                                             FORM)
                                                            S-ENV
                                                            VALUE-CONTEXT)))))
                             (ALPHA
                              (SYNTAX-ERROR
                               "(define ...) disallowed in this context"
                               FORM)
                              S-ENV
                              CONTEXT))))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL VALUE-CONTEXT TOP-LEVEL-CONTEXT CLASS/DEFINE-SYNTAX))
  (DEFINE-ALPHATIZER CLASS/DEFINE-SYNTAX
                     #'(LAMBDA (FORM S-ENV CONTEXT)
                         (IF (EQ CONTEXT TOP-LEVEL-CONTEXT)
                             (PROGN
                              (PROCESS-DEFINE-SYNTAX FORM S-ENV)
                              (MAKE-CALL
                               (ALPHA '%DEFINE-SYNTAX! S-ENV VALUE-CONTEXT)
                               (LIST (MAKE-CONSTANT (CDR FORM) TRUE))))
                             (ALPHA
                              (SYNTAX-ERROR
                               "(define-syntax ...) disallowed in this context"
                               FORM)
                              S-ENV
                              CONTEXT))))))
(DEFUN INITIALIZE-CORE-SYNTAX (ENV)
  (DECLARE
   (SPECIAL CLASS/DEFINE-SYNTAX
            CLASS/DEFINE
            CLASS/LETREC-SYNTAX
            CLASS/LET-SYNTAX
            CLASS/SET!
            CLASS/BEGIN
            CLASS/QUOTE
            CLASS/IF
            CLASS/LETREC
            CLASS/LAMBDA))
  (DEFINE! ENV 'SCHEME::LAMBDA (MAKE-SPECIAL-OPERATOR CLASS/LAMBDA))
  (DEFINE! ENV 'SCHEME::LETREC (MAKE-SPECIAL-OPERATOR CLASS/LETREC))
  (DEFINE! ENV 'SCHEME::IF (MAKE-SPECIAL-OPERATOR CLASS/IF))
  (DEFINE! ENV 'SCHEME::QUOTE (MAKE-SPECIAL-OPERATOR CLASS/QUOTE))
  (DEFINE! ENV 'SCHEME::BEGIN (MAKE-SPECIAL-OPERATOR CLASS/BEGIN))
  (DEFINE! ENV 'SCHEME::SET! (MAKE-SPECIAL-OPERATOR CLASS/SET!))
  (DEFINE! ENV 'SCHEME::LET-SYNTAX (MAKE-SPECIAL-OPERATOR CLASS/LET-SYNTAX))
  (DEFINE! ENV
           'SCHEME::LETREC-SYNTAX
           (MAKE-SPECIAL-OPERATOR CLASS/LETREC-SYNTAX))
  (DEFINE! ENV 'SCHEME::DEFINE (MAKE-SPECIAL-OPERATOR CLASS/DEFINE))
  (DEFINE! ENV
           'SCHEME::DEFINE-SYNTAX
           (MAKE-SPECIAL-OPERATOR CLASS/DEFINE-SYNTAX)))
(SET-VALUE-FROM-FUNCTION 'INITIALIZE-CORE-SYNTAX
                         'SCHEME::INITIALIZE-CORE-SYNTAX)
(LOCALLY
 (DECLARE (SPECIAL REVISED^4-SCHEME-ENV))
 (SETQ REVISED^4-SCHEME-ENV (MAKE-PROGRAM-ENV 'SCHEME::REVISED^4-SCHEME 'NIL)))
(SET-FUNCTION-FROM-VALUE 'REVISED^4-SCHEME-ENV 'SCHEME::REVISED^4-SCHEME-ENV)
(LOCALLY
 (DECLARE (SPECIAL REVISED^4-SCHEME-ENV))
 (INITIALIZE-CORE-SYNTAX REVISED^4-SCHEME-ENV))
(LOCALLY
 (DECLARE
  (SPECIAL REVISED^4-SCHEME-STRUCTURE
           REVISED^4-SCHEME-ENV
           REVISED^4-SCHEME-INTERFACE))
 (SETQ REVISED^4-SCHEME-STRUCTURE
       (MAKE-STRUCTURE 'SCHEME::REVISED^4-SCHEME
                       REVISED^4-SCHEME-INTERFACE
                       REVISED^4-SCHEME-ENV)))
(SET-FUNCTION-FROM-VALUE 'REVISED^4-SCHEME-STRUCTURE
                         'SCHEME::REVISED^4-SCHEME-STRUCTURE)
(DEFUN BUILT-IN (NAME)
  (DECLARE (SPECIAL REVISED^4-SCHEME-ENV))
  (PROGRAM-ENV-LOOKUP REVISED^4-SCHEME-ENV NAME))
(SET-VALUE-FROM-FUNCTION 'BUILT-IN 'SCHEME::BUILT-IN)
(DEFUN READ-FILE (FILENAME)
  (LET ((SCHEME::STRING FILENAME)
        (SCHEME::PROC
         #'(LAMBDA (I-PORT)
             (PROG (L)
               (SETQ L 'NIL)
               (GO LOOP)
              LOOP
               (LET ((FORM (.READ I-PORT)))
                 (IF (EQ FORM EOF-OBJECT)
                     (RETURN (REVERSE L))
                     (PROGN (SETQ L (CONS FORM L)) (GO LOOP))))))))
    (WITH-OPEN-FILE
        (SCHEME::PORT (MERGE-PATHNAMES SCHEME::STRING) :DIRECTION :INPUT)
      (FUNCALL SCHEME::PROC SCHEME::PORT))))
(SET-VALUE-FROM-FUNCTION 'READ-FILE 'SCHEME::READ-FILE)
(DEFUN NOTE (MSG NODE)
  (DECLARE (SPECIAL @WHERE))
  (TERPRI)
  (DISPLAY "** ")
  (DISPLAY MSG)
  (IF (TRUEP NODE)
      (PROGN
       (DISPLAY ": ")
       (.WRITE
        (LET-FLUID @WHERE 'SCHEME::<NOTE> #'(LAMBDA () (SCHEMIFY-TOP NODE))))
       (TERPRI)
       (DISPLAY "   Location: ")
       (.WRITE (FLUID @WHERE))))
  (TERPRI))
(SET-VALUE-FROM-FUNCTION 'NOTE 'SCHEME::NOTE)
(DEFUN SYNTAX-ERROR (MSG FORM)
  (NOTE MSG FORM)
  (CONS 'SCHEME-ERROR
        (CONS (CONS 'SCHEME::QUOTE (LIST MSG))
              (LIST (CONS 'SCHEME::QUOTE (LIST FORM))))))
(SET-VALUE-FROM-FUNCTION 'SYNTAX-ERROR 'SCHEME::SYNTAX-ERROR)
(LOCALLY (DECLARE (SPECIAL @UNIQUE-ID)) (SETQ @UNIQUE-ID (MAKE-FLUID 0)))
(SET-FUNCTION-FROM-VALUE '@UNIQUE-ID 'SCHEME::@UNIQUE-ID)
(DEFUN WITH-UID-RESET (THUNK)
  (DECLARE (SPECIAL @UNIQUE-ID))
  (LET-FLUID @UNIQUE-ID 0 THUNK))
(SET-VALUE-FROM-FUNCTION 'WITH-UID-RESET 'SCHEME::WITH-UID-RESET)
(DEFUN GENERATE-UID ()
  (DECLARE (SPECIAL @UNIQUE-ID))
  (LET ((UID (FLUID @UNIQUE-ID)))
    (SET-FLUID! @UNIQUE-ID (+ UID 1))
    UID))
(SET-VALUE-FROM-FUNCTION 'GENERATE-UID 'SCHEME::GENERATE-UID)
(DEFUN MAKE-NAME-FROM-UID (NAME UID)
  (DECLARE (SPECIAL @TARGET-PACKAGE))
  (.INTERN (STRING-APPEND "." (NAME->STRING NAME) "." (NUMBER->STRING UID))
           (FLUID @TARGET-PACKAGE)))
(SET-VALUE-FROM-FUNCTION 'MAKE-NAME-FROM-UID 'SCHEME::MAKE-NAME-FROM-UID)
(DEFUN RENAME-VARS (NAMES S-ENV)
  (DECLARE (SPECIAL MAKE-LOCAL-VARIABLE))
  (BIND NAMES (MAPCAR MAKE-LOCAL-VARIABLE NAMES) S-ENV))
(SET-VALUE-FROM-FUNCTION 'RENAME-VARS 'SCHEME::RENAME-VARS)
(DEFUN NEW-NAMES (BVL ENV) (MAP-BVL #'(LAMBDA (VAR) (LOOKUP ENV VAR)) BVL))
(SET-VALUE-FROM-FUNCTION 'NEW-NAMES 'SCHEME::NEW-NAMES)
(DEFUN CAR-IS? (THING X) (IF (CONSP THING) (TRUE? (EQ (CAR THING) X)) FALSE))
(SET-VALUE-FROM-FUNCTION 'CAR-IS? 'SCHEME::CAR-IS?)
