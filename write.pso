; -*- Mode: Lisp; Syntax: Common-Lisp; Package: REVISED^4-SCHEME; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/write.scm

(ps:in-package "REVISED^4-SCHEME")
(BEGIN-TRANSLATED-FILE)
(DEFUN OUTPUT-PORT-OPTION (PORT-OPTION)
  (IF (NULL PORT-OPTION)
      *STANDARD-OUTPUT*
      (IF (NULL (CDR PORT-OPTION))
          (CAR PORT-OPTION)
          (SCHEME-ERROR "write-mumble: too many arguments" PORT-OPTION))))
(SET-VALUE-FROM-FUNCTION 'OUTPUT-PORT-OPTION 'SCHEME::OUTPUT-PORT-OPTION)
(DEFUN DISCLOSE (OBJ) OBJ FALSE)
(SET-VALUE-FROM-FUNCTION 'DISCLOSE 'SCHEME::DISCLOSE)
(DEFUN WRITE-STRING (.STRING PORT) (PRINC .STRING PORT))
(SET-VALUE-FROM-FUNCTION 'WRITE-STRING 'SCHEME::WRITE-STRING)
(DEFUN SCHEME-WRITE (OBJ &REST PORT-OPTION)
  (MAYBE-FIX-&REST-PARAMETER PORT-OPTION)
  (LET ((PORT (OUTPUT-PORT-OPTION PORT-OPTION)))
    (LABELS ((RECUR (.OBJ.0)
               (RECURRING-WRITE .OBJ.0 PORT #'RECUR)))
      (RECUR OBJ))))
(SET-VALUE-FROM-FUNCTION 'SCHEME-WRITE 'SCHEME::SCHEME-WRITE)
(DEFUN RECURRING-WRITE (OBJ PORT RECUR)
  (IF (NULL OBJ)
      (WRITE-STRING "()" PORT)
      (IF (CONSP OBJ)
          (WRITE-LIST OBJ PORT RECUR)
          (IF (EQ OBJ TRUE)
              (WRITE-BOOLEAN 'SCHEME::T PORT)
              (IF (EQ OBJ FALSE)
                  (WRITE-BOOLEAN 'SCHEME::F PORT)
                  (IF (SCHEME-SYMBOL-P OBJ)
                      (WRITE-SYMBOL OBJ PORT)
                      (IF (NUMBERP OBJ)
                          (WRITE-NUMBER OBJ PORT)
                          (IF (SIMPLE-STRING-P OBJ)
                              (WRITE-STRING-LITERAL OBJ PORT)
                              (IF (CHARACTERP OBJ)
                                  (WRITE-CHAR-LITERAL OBJ PORT)
                                  (WRITE-OTHER OBJ PORT RECUR))))))))))
(SET-VALUE-FROM-FUNCTION 'RECURRING-WRITE 'SCHEME::RECURRING-WRITE)
(DEFUN WRITE-SYMBOL (OBJ PORT) (WRITE-STRING (SYMBOL->STRING OBJ) PORT))
(SET-VALUE-FROM-FUNCTION 'WRITE-SYMBOL 'SCHEME::WRITE-SYMBOL)
(DEFUN WRITE-BOOLEAN (MUMBLE PORT)
  (WRITE-CHAR #\# PORT)
  (WRITE-SYMBOL MUMBLE PORT))
(SET-VALUE-FROM-FUNCTION 'WRITE-BOOLEAN 'SCHEME::WRITE-BOOLEAN)
(DEFUN WRITE-NUMBER (N PORT) (WRITE-STRING (NUMBER->STRING N 10) PORT))
(SET-VALUE-FROM-FUNCTION 'WRITE-NUMBER 'SCHEME::WRITE-NUMBER)
(DEFUN WRITE-CHAR-LITERAL (OBJ PORT)
  (LET ((PROBE (CHARACTER-NAME OBJ)))
    (WRITE-STRING "#\\" PORT)
    (IF (TRUEP PROBE) (WRITE-SYMBOL PROBE PORT) (WRITE-CHAR OBJ PORT))))
(SET-VALUE-FROM-FUNCTION 'WRITE-CHAR-LITERAL 'SCHEME::WRITE-CHAR-LITERAL)
(DEFUN CHARACTER-NAME (.CHAR)
  (IF (CHAR= .CHAR #\SPACE)
      'SCHEME::SPACE
      (IF (CHAR= .CHAR #\NEWLINE) 'SCHEME::NEWLINE FALSE)))
(SET-VALUE-FROM-FUNCTION 'CHARACTER-NAME 'SCHEME::CHARACTER-NAME)
(DEFUN WRITE-STRING-LITERAL (OBJ PORT)
  (WRITE-CHAR #\" PORT)
  (LET ((LEN (LENGTH (THE SIMPLE-STRING OBJ))))
    (PROG (|.I.0|)
      (SETQ |.I.0| 0)
      (GO .LOOP.104)
     .LOOP.104
      (LET ((I |.I.0|))
        (IF (= I LEN)
            (RETURN (WRITE-CHAR #\" PORT))
            (PROGN
             (LET ((C (CHAR (THE SIMPLE-STRING OBJ) I)))
               (IF (OR (CHAR= C #\\) (CHAR= C #\")) (WRITE-CHAR #\\ PORT))
               (WRITE-CHAR C PORT))
             (SETQ |.I.0| (+ I 1))
             (GO .LOOP.104)))))))
(SET-VALUE-FROM-FUNCTION 'WRITE-STRING-LITERAL 'SCHEME::WRITE-STRING-LITERAL)
(DEFUN WRITE-LIST (OBJ PORT RECUR)
  (IF (TRUEP (QUOTATION? OBJ))
      (PROGN (WRITE-CHAR #\' PORT) (FUNCALL RECUR (CADR OBJ)))
      (PROGN
       (WRITE-CHAR #\( PORT)
       (FUNCALL RECUR (CAR OBJ))
       (PROG (L N)
         (PSETQ L (CDR OBJ) N 1)
         (GO LOOP)
        LOOP
         (IF (NOT (CONSP L))
             (IF (NOT (NULL L))
                 (PROGN (WRITE-STRING " . " PORT) (RETURN (FUNCALL RECUR L)))
                 (RETURN UNSPECIFIC))
             (PROGN
              (WRITE-CHAR #\SPACE PORT)
              (FUNCALL RECUR (CAR L))
              (PSETQ L (CDR L) N (+ N 1))
              (GO LOOP))))
       (WRITE-CHAR #\) PORT))))
(SET-VALUE-FROM-FUNCTION 'WRITE-LIST 'SCHEME::WRITE-LIST)
(DEFUN QUOTATION? (OBJ)
  (IF (CONSP OBJ)
      (IF (EQ (CAR OBJ) 'SCHEME::QUOTE)
          (IF (CONSP (CDR OBJ)) (TRUE? (NULL (CDDR OBJ))) FALSE)
          FALSE)
      FALSE))
(SET-VALUE-FROM-FUNCTION 'QUOTATION? 'SCHEME::QUOTATION?)
(DEFUN WRITE-VECTOR (OBJ PORT RECUR)
  (WRITE-STRING "#(" PORT)
  (LET ((Z (LENGTH (THE SIMPLE-VECTOR OBJ))))
    (IF (> Z 0)
        (PROGN
         (FUNCALL RECUR (SVREF OBJ 0))
         (PROG (|.I.0|)
           (SETQ |.I.0| 1)
           (GO LOOP)
          LOOP
           (LET ((I |.I.0|))
             (OR (>= I Z)
                 (PROGN
                  (WRITE-CHAR #\SPACE PORT)
                  (FUNCALL RECUR (SVREF OBJ I))
                  (SETQ |.I.0| (+ I 1))
                  (GO LOOP))))))))
  (WRITE-CHAR #\) PORT))
(SET-VALUE-FROM-FUNCTION 'WRITE-VECTOR 'SCHEME::WRITE-VECTOR)
(DEFUN WRITE-OTHER (OBJ PORT RECUR)
  (LET ((L (DISCLOSE OBJ)))
    (IF (TRUEP L)
        (PROGN
         (WRITE-STRING "#{" PORT)
         (DISPLAY-TYPE-NAME (CAR L) PORT)
         (MAPC #'(LAMBDA (X) (WRITE-CHAR #\SPACE PORT) (FUNCALL RECUR X))
               (CDR L))
         (WRITE-STRING "}" PORT))
        (IF (PROCEDUREP OBJ)
            (WRITE-STRING "#{Procedure}" PORT)
            (IF (INPUT-PORT-P OBJ)
                (WRITE-STRING "#{Input-port}" PORT)
                (IF (OUTPUT-PORT-P OBJ)
                    (WRITE-STRING "#{Output-port}" PORT)
                    (IF (EQ OBJ EOF-OBJECT)
                        (WRITE-STRING "#{End-of-file}" PORT)
                        (IF (TRUEP (VECTOR? OBJ))
                            (WRITE-VECTOR OBJ PORT RECUR)
                            (IF (EQ OBJ (IF NIL FALSE))
                                (WRITE-STRING "#{Unspecific}" PORT)
                                (PRIN1 OBJ PORT))))))))))
(SET-VALUE-FROM-FUNCTION 'WRITE-OTHER 'SCHEME::WRITE-OTHER)
(DEFUN DISPLAY-TYPE-NAME (NAME PORT)
  (IF (SCHEME-SYMBOL-P NAME)
      (LET ((S (SYMBOL->STRING NAME)))
        (LET ((LEN (LENGTH (THE SIMPLE-STRING S))))
          (LET ()
            (IF (AND (> LEN 0) (ALPHA-CHAR-P (CHAR (THE SIMPLE-STRING S) 0)))
                (PROGN
                 (WRITE-CHAR (CHAR-UPCASE (CHAR (THE SIMPLE-STRING S) 0)) PORT)
                 (PROG (|.I.0|)
                   (SETQ |.I.0| 1)
                   (GO .LOOP.130)
                  .LOOP.130
                   (LET ((I |.I.0|))
                     (OR (>= I LEN)
                         (PROGN
                          (WRITE-CHAR
                           (CHAR-DOWNCASE (CHAR (THE SIMPLE-STRING S) I))
                           PORT)
                          (SETQ |.I.0| (+ I 1))
                          (GO .LOOP.130))))))
                (DISPLAY NAME PORT)))))
      (DISPLAY NAME PORT)))
(SET-VALUE-FROM-FUNCTION 'DISPLAY-TYPE-NAME 'SCHEME::DISPLAY-TYPE-NAME)
(DEFUN SCHEME-DISPLAY (OBJ &REST PORT-OPTION)
  (MAYBE-FIX-&REST-PARAMETER PORT-OPTION)
  (LET ((PORT (OUTPUT-PORT-OPTION PORT-OPTION)))
    (LABELS ((RECUR (.OBJ.0)
               (IF (SIMPLE-STRING-P .OBJ.0)
                   (WRITE-STRING .OBJ.0 PORT)
                   (IF (CHARACTERP .OBJ.0)
                       (WRITE-CHAR .OBJ.0 PORT)
                       (RECURRING-WRITE .OBJ.0 PORT #'RECUR)))))
      (RECUR OBJ))))
(SET-VALUE-FROM-FUNCTION 'SCHEME-DISPLAY 'SCHEME::SCHEME-DISPLAY)
(LOCALLY (DECLARE (SPECIAL SCHEME-WRITE)) (SETQ *SCHEME-WRITE* SCHEME-WRITE))
(LOCALLY
 (DECLARE (SPECIAL SCHEME-DISPLAY))
 (SETQ *SCHEME-DISPLAY* SCHEME-DISPLAY))
