; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/list.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(DEFUN SOME (PRED L)
  (IF (NOT (NULL L))
      (LET ((TEMP (FUNCALL PRED (CAR L))))
        (IF (TRUEP TEMP) TEMP (SOME PRED (CDR L))))
      FALSE))
(SET-VALUE-FROM-FUNCTION 'SOME 'SCHEME::SOME)
(DEFUN EVERY (PRED L)
  (OR (NULL L) (IF (TRUEP (FUNCALL PRED (CAR L))) (EVERY PRED (CDR L)) FALSE)))
(SET-VALUE-FROM-FUNCTION 'EVERY 'SCHEME::EVERY)
(DEFUN RASSQ (OBJ LST)
  (IF (NULL LST)
      FALSE
      (IF (EQ OBJ (CDAR LST)) (CAR LST) (RASSQ OBJ (CDR LST)))))
(SET-VALUE-FROM-FUNCTION 'RASSQ 'SCHEME::RASSQ)
(DEFUN FILTER (PRED L)
  (IF (NULL L)
      'NIL
      (IF (TRUEP (FUNCALL PRED (CAR L)))
          (CONS (CAR L) (FILTER PRED (CDR L)))
          (FILTER PRED (CDR L)))))
(SET-VALUE-FROM-FUNCTION 'FILTER 'SCHEME::FILTER)
(DEFUN RIGHT-REDUCE (PROC LST IDENTITY)
  (IF (NULL LST)
      IDENTITY
      (RIGHT-REDUCE PROC (CDR LST) (FUNCALL PROC (CAR LST) IDENTITY))))
(SET-VALUE-FROM-FUNCTION 'RIGHT-REDUCE 'SCHEME::RIGHT-REDUCE)
(LOCALLY (DECLARE (SPECIAL REDUCE RIGHT-REDUCE)) (SETQ REDUCE RIGHT-REDUCE))
(SET-FUNCTION-FROM-VALUE 'REDUCE 'SCHEME::REDUCE)
(DEFUN SETDIFFQ (L1 L2)
  (IF (NULL L2)
      L1
      (IF (NULL L1)
          L1
          (IF (MEMBER (CAR L1) L2 :TEST #'EQ)
              (SETDIFFQ (CDR L1) L2)
              (CONS (CAR L1) (SETDIFFQ (CDR L1) L2))))))
(SET-VALUE-FROM-FUNCTION 'SETDIFFQ 'SCHEME::SETDIFFQ)
(DEFUN UNIONQ (L1 L2)
  (IF (NULL L1)
      L2
      (IF (NULL L2)
          L1
          (IF (MEMBER (CAR L1) L2 :TEST #'EQ)
              (UNIONQ (CDR L1) L2)
              (CONS (CAR L1) (UNIONQ (CDR L1) L2))))))
(SET-VALUE-FROM-FUNCTION 'UNIONQ 'SCHEME::UNIONQ)
(DEFUN INTERSECTQ (L1 L2)
  (IF (NULL L1)
      L1
      (IF (NULL L2)
          L2
          (IF (MEMBER (CAR L1) L2 :TEST #'EQ)
              (CONS (CAR L1) (INTERSECTQ (CDR L1) L2))
              (INTERSECTQ (CDR L1) L2)))))
(SET-VALUE-FROM-FUNCTION 'INTERSECTQ 'SCHEME::INTERSECTQ)
(DEFUN INTERSECTQ? (L1 L2)
  (IF (NOT (NULL L1))
      (IF (NOT (NULL L2))
          (OR (MEMBER (CAR L1) L2 :TEST #'EQ) (INTERSECTQ? (CDR L1) L2))
          FALSE)
      FALSE))
(SET-VALUE-FROM-FUNCTION 'INTERSECTQ? 'SCHEME::INTERSECTQ?)
