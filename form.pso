; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/form.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(DEFUN LITERAL? (X)
  (OR (NUMBERP X) (SIMPLE-STRING-P X) (BOOLEANP X) (TRUE? (CHARACTERP X))))
(SET-VALUE-FROM-FUNCTION 'LITERAL? 'SCHEME::LITERAL?)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL SYNTAX-CHECKERS NUMBER-OF-CLASSES))
  (SETQ SYNTAX-CHECKERS
        (MAKE-VECTOR NUMBER-OF-CLASSES #'(LAMBDA (FORM) FORM TRUE)))))
(SET-FUNCTION-FROM-VALUE 'SYNTAX-CHECKERS 'SCHEME::SYNTAX-CHECKERS)
(DEFUN DEFINE-SYNTAX-CHECKER (CLASS PROC)
  (DECLARE (SPECIAL SYNTAX-CHECKERS))
  (SETF (SVREF SYNTAX-CHECKERS CLASS) PROC)
  UNSPECIFIC)
(SET-VALUE-FROM-FUNCTION 'DEFINE-SYNTAX-CHECKER 'SCHEME::DEFINE-SYNTAX-CHECKER)
(DEFUN CHECK-SPECIAL-FORM-SYNTAX (CLASS FORM)
  (DECLARE (SPECIAL SYNTAX-CHECKERS))
  (FUNCALL (SVREF SYNTAX-CHECKERS CLASS) FORM))
(SET-VALUE-FROM-FUNCTION 'CHECK-SPECIAL-FORM-SYNTAX
                         'SCHEME::CHECK-SPECIAL-FORM-SYNTAX)
(LOCALLY
 (DECLARE (SPECIAL LET-SYNTAX-FORM-DSPECS))
 (SETQ LET-SYNTAX-FORM-DSPECS #'CADR))
(SET-FUNCTION-FROM-VALUE 'LET-SYNTAX-FORM-DSPECS
                         'SCHEME::LET-SYNTAX-FORM-DSPECS)
(LOCALLY
 (DECLARE (SPECIAL LET-SYNTAX-FORM-BODY))
 (SETQ LET-SYNTAX-FORM-BODY #'CADDR))
(SET-FUNCTION-FROM-VALUE 'LET-SYNTAX-FORM-BODY 'SCHEME::LET-SYNTAX-FORM-BODY)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CHECK-SYNTAX-SPEC CLASS/LET-SYNTAX))
  (DEFINE-SYNTAX-CHECKER CLASS/LET-SYNTAX
                         #'(LAMBDA (.EXP)
                             (IF (= (CAREFUL-LENGTH .EXP) 3)
                                 (CAREFUL-EVERY CHECK-SYNTAX-SPEC (CADR .EXP))
                                 FALSE)))))
(LOCALLY
 (DECLARE (SPECIAL LETREC-SYNTAX-FORM-DSPECS LET-SYNTAX-FORM-DSPECS))
 (SETQ LETREC-SYNTAX-FORM-DSPECS LET-SYNTAX-FORM-DSPECS))
(SET-FUNCTION-FROM-VALUE 'LETREC-SYNTAX-FORM-DSPECS
                         'SCHEME::LETREC-SYNTAX-FORM-DSPECS)
(LOCALLY
 (DECLARE (SPECIAL LETREC-SYNTAX-FORM-BODY LET-SYNTAX-FORM-BODY))
 (SETQ LETREC-SYNTAX-FORM-BODY LET-SYNTAX-FORM-BODY))
(SET-FUNCTION-FROM-VALUE 'LETREC-SYNTAX-FORM-BODY
                         'SCHEME::LETREC-SYNTAX-FORM-BODY)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CHECK-SYNTAX-SPEC CLASS/LETREC-SYNTAX))
  (DEFINE-SYNTAX-CHECKER CLASS/LETREC-SYNTAX
                         #'(LAMBDA (.EXP)
                             (IF (= (CAREFUL-LENGTH .EXP) 3)
                                 (CAREFUL-EVERY CHECK-SYNTAX-SPEC (CADR .EXP))
                                 FALSE)))))
(LOCALLY (DECLARE (SPECIAL SYNTAX-SPEC-NAME)) (SETQ SYNTAX-SPEC-NAME #'CAR))
(SET-FUNCTION-FROM-VALUE 'SYNTAX-SPEC-NAME 'SCHEME::SYNTAX-SPEC-NAME)
(LOCALLY (DECLARE (SPECIAL SYNTAX-SPEC-FORM)) (SETQ SYNTAX-SPEC-FORM #'CADR))
(SET-FUNCTION-FROM-VALUE 'SYNTAX-SPEC-FORM 'SCHEME::SYNTAX-SPEC-FORM)
(LOCALLY
 (DECLARE (SPECIAL SYNTAX-SPEC-FREE-NAMES))
 (SETQ SYNTAX-SPEC-FREE-NAMES #'CADDR))
(SET-FUNCTION-FROM-VALUE 'SYNTAX-SPEC-FREE-NAMES
                         'SCHEME::SYNTAX-SPEC-FREE-NAMES)
(DEFUN CHECK-SYNTAX-SPEC (SYNTAX-SPEC)
  (LET ((LEN (CAREFUL-LENGTH SYNTAX-SPEC)))
    (IF
     (OR (= LEN 2)
         (AND (= LEN 3) (TRUEP (LIST? (SYNTAX-SPEC-FREE-NAMES SYNTAX-SPEC)))))
     (NAME? (SYNTAX-SPEC-NAME SYNTAX-SPEC))
     FALSE)))
(SET-VALUE-FROM-FUNCTION 'CHECK-SYNTAX-SPEC 'SCHEME::CHECK-SYNTAX-SPEC)
(LOCALLY
 (DECLARE (SPECIAL DEFINE-SYNTAX-SYNTAX-SPEC))
 (SETQ DEFINE-SYNTAX-SYNTAX-SPEC #'CDR))
(SET-FUNCTION-FROM-VALUE 'DEFINE-SYNTAX-SYNTAX-SPEC
                         'SCHEME::DEFINE-SYNTAX-SYNTAX-SPEC)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/DEFINE-SYNTAX))
  (DEFINE-SYNTAX-CHECKER CLASS/DEFINE-SYNTAX
                         #'(LAMBDA (FORM) (CHECK-SYNTAX-SPEC (CDR FORM))))))
(LOCALLY
 (DECLARE (SPECIAL BEGIN-FORM-STATEMENTS))
 (SETQ BEGIN-FORM-STATEMENTS #'CDR))
(SET-FUNCTION-FROM-VALUE 'BEGIN-FORM-STATEMENTS 'SCHEME::BEGIN-FORM-STATEMENTS)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/BEGIN))
  (DEFINE-SYNTAX-CHECKER CLASS/BEGIN
                         #'(LAMBDA (FORM)
                             (TRUE? (>= (CAREFUL-LENGTH FORM) 1))))))
(LOCALLY
 (DECLARE (SPECIAL APPLICATION-FORM-PROCEDURE))
 (SETQ APPLICATION-FORM-PROCEDURE #'CAR))
(SET-FUNCTION-FROM-VALUE 'APPLICATION-FORM-PROCEDURE
                         'SCHEME::APPLICATION-FORM-PROCEDURE)
(LOCALLY
 (DECLARE (SPECIAL APPLICATION-FORM-ARGUMENTS))
 (SETQ APPLICATION-FORM-ARGUMENTS #'CDR))
(SET-FUNCTION-FROM-VALUE 'APPLICATION-FORM-ARGUMENTS
                         'SCHEME::APPLICATION-FORM-ARGUMENTS)
(LOCALLY
 (DECLARE (SPECIAL LAMBDA-FORM-FORMALS))
 (SETQ LAMBDA-FORM-FORMALS #'CADR))
(SET-FUNCTION-FROM-VALUE 'LAMBDA-FORM-FORMALS 'SCHEME::LAMBDA-FORM-FORMALS)
(LOCALLY (DECLARE (SPECIAL LAMBDA-FORM-BODY)) (SETQ LAMBDA-FORM-BODY #'CDDR))
(SET-FUNCTION-FROM-VALUE 'LAMBDA-FORM-BODY 'SCHEME::LAMBDA-FORM-BODY)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/LAMBDA))
  (DEFINE-SYNTAX-CHECKER CLASS/LAMBDA
                         #'(LAMBDA (.EXP)
                             (IF (>= (CAREFUL-LENGTH .EXP) 3)
                                 (CHECK-FORMALS (LAMBDA-FORM-FORMALS .EXP))
                                 FALSE)))))
(DEFUN CHECK-FORMALS (FORMALS)
  (OR (NULL FORMALS)
      (LET ((TEMP (NAME? FORMALS)))
        (IF (TRUEP TEMP)
            TEMP
            (IF (TRUEP (NAME? (CAR FORMALS)))
                (CHECK-FORMALS (CDR FORMALS))
                FALSE)))))
(SET-VALUE-FROM-FUNCTION 'CHECK-FORMALS 'SCHEME::CHECK-FORMALS)
(LOCALLY
 (DECLARE (SPECIAL LETREC-FORM-BSPECS))
 (SETQ LETREC-FORM-BSPECS #'CADR))
(SET-FUNCTION-FROM-VALUE 'LETREC-FORM-BSPECS 'SCHEME::LETREC-FORM-BSPECS)
(LOCALLY (DECLARE (SPECIAL LETREC-FORM-BODY)) (SETQ LETREC-FORM-BODY #'CDDR))
(SET-FUNCTION-FROM-VALUE 'LETREC-FORM-BODY 'SCHEME::LETREC-FORM-BODY)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/LETREC))
  (DEFINE-SYNTAX-CHECKER CLASS/LETREC
                         #'(LAMBDA (.EXP)
                             (IF (>= (CAREFUL-LENGTH .EXP) 3)
                                 (CAREFUL-EVERY
                                  #'(LAMBDA (SYNTAX-SPEC)
                                      (IF (= (CAREFUL-LENGTH SYNTAX-SPEC) 2)
                                          (NAME?
                                           (SYNTAX-SPEC-NAME SYNTAX-SPEC))
                                          FALSE))
                                  (LETREC-FORM-BSPECS .EXP))
                                 FALSE)))))
(LOCALLY (DECLARE (SPECIAL QUOTE-FORM-TEXT)) (SETQ QUOTE-FORM-TEXT #'CADR))
(SET-FUNCTION-FROM-VALUE 'QUOTE-FORM-TEXT 'SCHEME::QUOTE-FORM-TEXT)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/QUOTE))
  (DEFINE-SYNTAX-CHECKER CLASS/QUOTE
                         #'(LAMBDA (.EXP)
                             (TRUE? (= (CAREFUL-LENGTH .EXP) 2))))))
(LOCALLY (DECLARE (SPECIAL IF-FORM-TEST)) (SETQ IF-FORM-TEST #'CADR))
(SET-FUNCTION-FROM-VALUE 'IF-FORM-TEST 'SCHEME::IF-FORM-TEST)
(LOCALLY
 (DECLARE (SPECIAL IF-FORM-CONSEQUENT))
 (SETQ IF-FORM-CONSEQUENT #'CADDR))
(SET-FUNCTION-FROM-VALUE 'IF-FORM-CONSEQUENT 'SCHEME::IF-FORM-CONSEQUENT)
(DEFUN IF-FORM-ALTERNATE? (.EXP) (TRUE? (NOT (NULL (CDDDR .EXP)))))
(SET-VALUE-FROM-FUNCTION 'IF-FORM-ALTERNATE? 'SCHEME::IF-FORM-ALTERNATE?)
(LOCALLY
 (DECLARE (SPECIAL IF-FORM-ALTERNATE))
 (SETQ IF-FORM-ALTERNATE #'CADDDR))
(SET-FUNCTION-FROM-VALUE 'IF-FORM-ALTERNATE 'SCHEME::IF-FORM-ALTERNATE)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/IF))
  (DEFINE-SYNTAX-CHECKER CLASS/IF
                         #'(LAMBDA (.EXP)
                             (LET ((LEN (CAREFUL-LENGTH .EXP)))
                               (OR (= LEN 3) (TRUE? (= LEN 4))))))))
(LOCALLY (DECLARE (SPECIAL SET!-FORM-LHS)) (SETQ SET!-FORM-LHS #'CADR))
(SET-FUNCTION-FROM-VALUE 'SET!-FORM-LHS 'SCHEME::SET!-FORM-LHS)
(LOCALLY (DECLARE (SPECIAL SET!-FORM-RHS)) (SETQ SET!-FORM-RHS #'CADDR))
(SET-FUNCTION-FROM-VALUE 'SET!-FORM-RHS 'SCHEME::SET!-FORM-RHS)
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/SET!))
  (DEFINE-SYNTAX-CHECKER CLASS/SET!
                         #'(LAMBDA (.EXP)
                             (IF (= (CAREFUL-LENGTH .EXP) 3)
                                 (NAME? (CADR .EXP))
                                 FALSE)))))
(AT-TOP-LEVEL
 (LOCALLY
  (DECLARE (SPECIAL CLASS/DEFINE))
  (DEFINE-SYNTAX-CHECKER CLASS/DEFINE
                         #'(LAMBDA (FORM)
                             (IF (CONSP (CDR FORM))
                                 (LET ((PAT (CADR FORM))
                                       (LEN (CAREFUL-LENGTH FORM)))
                                   (IF (TRUEP (NAME? PAT))
                                       (OR (= LEN 2) (TRUE? (= LEN 3)))
                                       (IF (CONSP PAT)
                                           (IF
                                            (TRUEP (CHECK-FORMALS (CDR PAT)))
                                            (TRUE? (>= LEN 3))
                                            FALSE)
                                           FALSE)))
                                 FALSE)))))
(DEFUN DEFINE-FORM-LHS (FORM)
  (LET ((PAT (CADR FORM)))
    (IF (CONSP PAT) (CAR PAT) PAT)))
(SET-VALUE-FROM-FUNCTION 'DEFINE-FORM-LHS 'SCHEME::DEFINE-FORM-LHS)
(DEFUN DEFINE-FORM-RHS (FORM)
  (LET ((PAT (CADR FORM)))
    (IF (CONSP PAT)
        (CONS 'SCHEME::LAMBDA (CONS (CDR PAT) (CDDR FORM)))
        (IF (NULL (CDDR FORM)) 'UNSPECIFIC (CADDR FORM)))))
(SET-VALUE-FROM-FUNCTION 'DEFINE-FORM-RHS 'SCHEME::DEFINE-FORM-RHS)
(DEFUN CAREFUL-LENGTH (L)
  (IF (NULL L) 0 (IF (CONSP L) (+ 1 (CAREFUL-LENGTH (CDR L))) -1)))
(SET-VALUE-FROM-FUNCTION 'CAREFUL-LENGTH 'SCHEME::CAREFUL-LENGTH)
(DEFUN CAREFUL-EVERY (PRED L)
  (IF (NULL L)
      TRUE
      (IF (CONSP L)
          (IF (TRUEP (FUNCALL PRED (CAR L)))
              (CAREFUL-EVERY PRED (CDR L))
              FALSE)
          FALSE)))
(SET-VALUE-FROM-FUNCTION 'CAREFUL-EVERY 'SCHEME::CAREFUL-EVERY)
