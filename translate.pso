; -*- Mode: Lisp; Syntax: Common-Lisp; Package: SCHEME-TRANSLATOR; -*-

; This file was generated by Pseudoscheme 2.12
;  running in CMU Common Lisp 16-Aug-1993
;  from file /zu/jar/pseudo/translate.scm

(ps:in-package "SCHEME-TRANSLATOR")
(BEGIN-TRANSLATED-FILE)
(DEFUN TRANSLATE (FORM ENV)
  (WITH-TARGET-PACKAGE (PROGRAM-ENV-PACKAGE ENV)
                       #'(LAMBDA ()
                           (TRANSLATE-TO-COMMON-LISP (LIST FORM) ENV))))
(SET-VALUE-FROM-FUNCTION 'TRANSLATE 'SCHEME::TRANSLATE)
(DEFUN TRANSLATE-TO-COMMON-LISP (FORMS ENV)
  (DECLARE (SPECIAL @FREE-VARIABLES))
  (PROGNIFY
   (LABELS ((RECUR (.FORMS.0)
              (IF (NULL .FORMS.0)
                  'NIL
                  (CONS
                   (WITH-UID-RESET
                    #'(LAMBDA ()
                        (LET-FLUID @FREE-VARIABLES
                                   'NIL
                                   #'(LAMBDA ()
                                       (LET ((NODE
                                              (ALPHA-TOP (CAR .FORMS.0) ENV)))
                                         (GENERATE-TOP NODE
                                                       (GENERATION-ENV
                                                        (FLUID
                                                         @FREE-VARIABLES))
                                                       (TRUE?
                                                        (NOT
                                                         (NULL
                                                          (CDR
                                                           .FORMS.0))))))))))
                   (RECUR (CDR .FORMS.0))))))
     (RECUR FORMS))))
(SET-VALUE-FROM-FUNCTION 'TRANSLATE-TO-COMMON-LISP
                         'SCHEME::TRANSLATE-TO-COMMON-LISP)
(DEFUN TRANSLATE-LAMBDA (FORM ENV)
  (DECLARE (SPECIAL @FREE-VARIABLES))
  (WITH-UID-RESET
   #'(LAMBDA ()
       (LET-FLUID @FREE-VARIABLES
                  'NIL
                  #'(LAMBDA ()
                      (LET ((NODE (ALPHA-TOP FORM ENV)))
                        (IF (TRUEP (LAMBDA? NODE))
                            (GENERATE-LAMBDA-TOP NODE
                                                 (GENERATION-ENV
                                                  (FLUID @FREE-VARIABLES)))
                            (.ERROR "not a lambda expression" FORM))))))))
(SET-VALUE-FROM-FUNCTION 'TRANSLATE-LAMBDA 'SCHEME::TRANSLATE-LAMBDA)
(DEFUN REALLY-TRANSLATE-FILE
       (SOURCE-FILE-NAME TRANSLATED-FILE-NAME PROGRAM-ENV)
  (LET ((SOURCE-CODE (READ-FILE SOURCE-FILE-NAME)))
    (COMPILING-TO-FILE TRANSLATED-FILE-NAME
                       (PROGRAM-ENV-PACKAGE PROGRAM-ENV)
                       #'(LAMBDA (PORT)
                           (DISPLAY ";  from file " PORT)
                           (DISPLAY (TRUE-NAME SOURCE-FILE-NAME) PORT)
                           (TERPRI PORT))
                       #'(LAMBDA (PORT)
                           (MAPC #'(LAMBDA (FORM) (WRITE-FLATTENED FORM PORT))
                                 (TRANSLATE-TO-COMMON-LISP SOURCE-CODE
                                                           PROGRAM-ENV))))))
(SET-VALUE-FROM-FUNCTION 'REALLY-TRANSLATE-FILE 'SCHEME::REALLY-TRANSLATE-FILE)
(DEFUN WRITE-CLOSED-DEFINITIONS (STRUCTURE OUTFILE)
  (COMPILING-TO-FILE OUTFILE
                     (STRUCTURE-PACKAGE STRUCTURE)
                     #'(LAMBDA (PORT) PORT)
                     #'(LAMBDA (PORT)
                         (WRITE-CLOSED-DEFINITIONS-1 STRUCTURE PORT))))
(SET-VALUE-FROM-FUNCTION 'WRITE-CLOSED-DEFINITIONS
                         'SCHEME::WRITE-CLOSED-DEFINITIONS)
(DEFUN WRITE-CLOSED-DEFINITIONS-1 (STRUCTURE PORT)
  (LET ((SIG (STRUCTURE-INTERFACE STRUCTURE))
        (ENV (STRUCTURE-PROGRAM-ENV STRUCTURE)))
    (LET ((FUNS 'NIL) (DEFS 'NIL))
      (FLET ((DO-IT (NAME)
               (LET ((DEN (PROGRAM-ENV-LOOKUP ENV NAME)))
                 (LET ((INFO (GET-INTEGRATION DEN)))
                   (LET ()
                     (IF (TRUEP INFO)
                         (LET ((SYM (PROGRAM-VARIABLE-LOCATION DEN)))
                           (CASE (CAR INFO)
                             ((SCHEME::VAL)
                              (WRITE-FORM
                               (CONS 'LOCALLY
                                     (CONS
                                      (CONS 'DECLARE
                                            (LIST (CONS 'SPECIAL (LIST SYM))))
                                      (LIST
                                       (CONS 'SETQ
                                             (CONS SYM (LIST (CADR INFO)))))))
                               PORT)
                              (WRITE-FORM
                               (CONS 'SET-FUNCTION-FROM-VALUE
                                     (LIST (CONS 'QUOTE (LIST SYM))))
                               PORT))
                             ((SCHEME::FUN)
                              (IF
                               (NOT
                                (MEMBER NAME
                                        '(SCHEME::CAR SCHEME::CDR)
                                        :TEST
                                        #'EQ))
                               (PROGN
                                (SETQ FUNS (CONS (LIST SYM (CADR INFO)) FUNS))
                                UNSPECIFIC)))
                             ((SCHEME::PRED)
                              (WRITE-FORM
                               (CASE
                                   (IF (NULL (CDDR INFO))
                                       'SCHEME::N
                                       (CADDR INFO))
                                 ((1)
                                  (CONS 'DEFUN
                                        (CONS SYM
                                              (CONS '(SCHEME::X)
                                                    (LIST
                                                     (CONS 'TRUE?
                                                           (LIST
                                                            (CONS (CADR INFO)
                                                                  '(SCHEME::X)))))))))
                                 ((2)
                                  (CONS 'DEFUN
                                        (CONS SYM
                                              (CONS '(SCHEME::X SCHEME::Y)
                                                    (LIST
                                                     (CONS 'TRUE?
                                                           (LIST
                                                            (CONS (CADR INFO)
                                                                  '(SCHEME::X
                                                                    SCHEME::Y)))))))))
                                 (OTHERWISE
                                  (CONS 'DEFUN
                                        (CONS SYM
                                              (CONS '(&REST SCHEME::X)
                                                    (LIST
                                                     (CONS 'TRUE?
                                                           (LIST
                                                            (CONS 'APPLY
                                                                  (CONS
                                                                   (CONS
                                                                    'FUNCTION
                                                                    (LIST
                                                                     (CADR
                                                                      INFO)))
                                                                   '(SCHEME::X)))))))))))
                               PORT)
                              (SETQ DEFS (CONS SYM DEFS))
                              UNSPECIFIC)
                             ((SCHEME::SUBST SCHEME::LAMBDA)
                              (WRITE-FORM (CONS 'DEFUN (CONS SYM (CDR INFO)))
                                          PORT)
                              (SETQ DEFS (CONS SYM DEFS))
                              UNSPECIFIC)
                             ((SCHEME::SPECIAL) 0)
                             (OTHERWISE
                              (.ERROR "peculiar built-in" INFO))))))))))
        (MAPC #'DO-IT (INTERFACE-NAMES SIG))
        (MAPC #'DO-IT (INTERFACE-AUX-NAMES SIG)))
      (WRITE-FORM
       (CONS 'MAPC
             (CONS '#'SET-VALUE-FROM-FUNCTION
                   (LIST (CONS 'QUOTE (LIST (REVERSE DEFS))))))
       PORT)
      (WRITE-FORM
       (CONS 'MAPC
             (CONS
              '#'(LAMBDA (SCHEME::Z)
                   (LET ((SCHEME::OUR-SYM (CAR SCHEME::Z))
                         (SCHEME::CL-SYM (CADR SCHEME::Z)))
                     (SETF (SYMBOL-FUNCTION SCHEME::OUR-SYM)
                           (SYMBOL-FUNCTION SCHEME::CL-SYM))
                     (SET-VALUE-FROM-FUNCTION SCHEME::OUR-SYM)))
              (LIST (CONS 'QUOTE (LIST (REVERSE FUNS))))))
       PORT))))
(SET-VALUE-FROM-FUNCTION 'WRITE-CLOSED-DEFINITIONS-1
                         'SCHEME::WRITE-CLOSED-DEFINITIONS-1)
(DEFUN WITH-TARGET-PACKAGE (PACKAGE THUNK)
  (DECLARE (SPECIAL @TARGET-PACKAGE))
  (LET-FLUID @TARGET-PACKAGE PACKAGE THUNK))
(SET-VALUE-FROM-FUNCTION 'WITH-TARGET-PACKAGE 'SCHEME::WITH-TARGET-PACKAGE)
(DEFUN COMPILING-TO-FILE (OUTFILE PACKAGE WRITE-MESSAGE PROC)
  (DECLARE (SPECIAL @TRANSLATING-TO-FILE?))
  (LET-FLUID @TRANSLATING-TO-FILE?
             TRUE
             #'(LAMBDA ()
                 (WITH-TARGET-PACKAGE PACKAGE
                                      #'(LAMBDA ()
                                          (LET ((SCHEME::STRING OUTFILE)
                                                (SCHEME::PROC
                                                 #'(LAMBDA (PORT)
                                                     (WRITE-FILE-IDENTIFICATION
                                                      PORT)
                                                     (FUNCALL WRITE-MESSAGE
                                                              PORT)
                                                     (TERPRI PORT)
                                                     (DISPLAY "(ps:in-package "
                                                              PORT)
                                                     (.WRITE
                                                      (.PACKAGE-NAME PACKAGE)
                                                      PORT)
                                                     (DISPLAY ")" PORT)
                                                     (TERPRI PORT)
                                                     (WRITE-FORM
                                                      '(BEGIN-TRANSLATED-FILE)
                                                      PORT)
                                                     (TERPRI PORT)
                                                     (FUNCALL PROC PORT)
                                                     (TERPRI PORT)
                                                     OUTFILE)))
                                            (WITH-OPEN-FILE
                                                (SCHEME::PORT
                                                 (MERGE-PATHNAMES
                                                  SCHEME::STRING)
                                                 :DIRECTION :OUTPUT :IF-EXISTS
                                                 :NEW-VERSION)
                                              (FUNCALL SCHEME::PROC
                                                       SCHEME::PORT))))))))
(SET-VALUE-FROM-FUNCTION 'COMPILING-TO-FILE 'SCHEME::COMPILING-TO-FILE)
(DEFUN WRITE-FILE-IDENTIFICATION (PORT)
  (DECLARE (SPECIAL @TARGET-PACKAGE))
  (TERPRI)
  (DISPLAY "Writing ")
  (DISPLAY (TRUE-NAME PORT))
  (DISPLAY "; -*- Mode: Lisp; Syntax: Common-Lisp; Package: " PORT)
  (DISPLAY (.PACKAGE-NAME (FLUID @TARGET-PACKAGE)) PORT)
  (DISPLAY "; -*-" PORT)
  (TERPRI PORT)
  (TERPRI PORT)
  (DISPLAY "; This file was generated by " PORT)
  (DISPLAY (TRANSLATOR-VERSION) PORT)
  (TERPRI PORT)
  (DISPLAY ";  running in " PORT)
  (DISPLAY (SCHEME-IMPLEMENTATION-VERSION) PORT)
  (TERPRI PORT))
(SET-VALUE-FROM-FUNCTION 'WRITE-FILE-IDENTIFICATION
                         'SCHEME::WRITE-FILE-IDENTIFICATION)
(DEFUN WRITE-FLATTENED (FORM PORT)
  (IF (NOT (CONSP FORM))
      (IF
       (NOT
        (OR (SCHEME-SYMBOL-P FORM)
            (NUMBERP FORM)
            (BOOLEANP FORM)
            (SIMPLE-STRING-P FORM)
            (CHARACTERP FORM)))
       (WRITE-FORM FORM PORT))
      (OR (EQ (CAR FORM) 'QUOTE)
          (IF (EQ (CAR FORM) 'PROGN)
              (MAPC #'(LAMBDA (.FORM.0) (WRITE-FLATTENED .FORM.0 PORT))
                    (CDR FORM))
              (WRITE-FORM FORM PORT)))))
(SET-VALUE-FROM-FUNCTION 'WRITE-FLATTENED 'SCHEME::WRITE-FLATTENED)
(DEFUN WRITE-FORM (FORM PORT)
  (DECLARE (SPECIAL @TARGET-PACKAGE))
  (WRITE-PRETTY FORM PORT (FLUID @TARGET-PACKAGE)))
(SET-VALUE-FROM-FUNCTION 'WRITE-FORM 'SCHEME::WRITE-FORM)
